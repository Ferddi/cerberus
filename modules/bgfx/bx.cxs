' Returns converted the argument _deg to radians.
'
Function bxToRad:Float( _deg:Float )="_bx_to_rad"

' Returns converted the argument _rad to degrees.
'
Function bxToDeg:Float( _rad:Float )="_bx_to_deg"

' Reinterprets the bit pattern of _a as uint32_t.
'
Function BX_CONST_FUNC uint32_t floatToBits(float _a)="_bx_"

' Reinterprets the bit pattern of _a as float.
'
Function BX_CONST_FUNC float bitsToFloat(uint32_t _a)="_bx_"

' Reinterprets the bit pattern of _a as uint64_t.
'
Function BX_CONST_FUNC uint64_t doubleToBits(double _a)="_bx_"

' Reinterprets the bit pattern of _a as double.
'
Function BX_CONST_FUNC double bitsToDouble(uint64_t _a)="_bx_"

' Returns sortable floating point value.
'
Function BX_CONST_FUNC uint32_t floatFlip(uint32_t _value)="_bx_"

' Returns true if _f is a number that is NaN.
'
Function BX_CONST_FUNC bool isNan(float _f)="_bx_"

' Returns true if _f is a number that is NaN.
'
Function BX_CONST_FUNC bool isNan(double _f)="_bx_"

' Returns true if _f is not infinite and is not a NaN.
'
Function BX_CONST_FUNC bool isFinite(float _f)="_bx_"

' Returns true if _f is not infinite and is not a NaN.
'
Function BX_CONST_FUNC bool isFinite(double _f)="_bx_"

' Returns true if _f is infinite and is not a NaN.
'
Function BX_CONST_FUNC bool isInfinite(float _f)="_bx_"

' Returns true if _f is infinite and is not a NaN.
'
Function BX_CONST_FUNC bool isInfinite(double _f)="_bx_"

' Returns the largest integer value not greater than _f.
'
Function BX_CONST_FUNC float floor(float _f)="_bx_"

' Returns the smallest integer value not less than _f.
'
Function BX_CONST_FUNC float ceil(float _f)="_bx_"

' Returns the nearest integer value to _f, rounding halfway cases away from zero,
'
Function BX_CONST_FUNC float round(float _f)="_bx_"

' Returns linear interpolation between two values _a and _b.
'
Function BX_CONST_FUNC float lerp(float _a, float _b, float _t)="_bx_"

' Returns the sign of _a.
'
Function BX_CONST_FUNC float sign(float _a)="_bx_"

' Returns the absolute of _a.
'
Function BX_CONST_FUNC float abs(float _a)="_bx_"

' Returns the square of _a.
'
Function BX_CONST_FUNC float square(float _a)="_bx_"

' Returns the cosine of the argument _a.
'
Function BX_CONST_FUNC float sin(float _a)="_bx_"

' Returns hyperbolic sine of the argument _a.
'
Function BX_CONST_FUNC float sinh(float _a)="_bx_"

' Returns radian angle between -pi/2 and +pi/2 whose sine is _a.
'
Function BX_CONST_FUNC float asin(float _a)="_bx_"

' Returns the cosine of the argument _a.
'
Function BX_CONST_FUNC float cos(float _a)="_bx_"

' Returns hyperbolic cosine of the argument _a.
'
Function BX_CONST_FUNC float cosh(float _a)="_bx_"

' Returns radian angle between 0 and pi whose cosine is _a.
'
Function BX_CONST_FUNC float acos(float _a)="_bx_"

' Returns the circular tangent of the radian argument _a.
'
Function BX_CONST_FUNC float tan(float _a)="_bx_"

' Returns hyperbolic tangent of the argument _a.
'
Function BX_CONST_FUNC float tanh(float _a)="_bx_"

' Returns radian angle between -pi/2 and +pi/2 whose tangent is _a.
'
Function BX_CONST_FUNC float atan(float _a)="_bx_"

' Retruns the inverse tangent of _y/_x.
'
Function BX_CONST_FUNC float atan2(float _y, float _x)="_bx_"

' Computes _a raised to the _b power.
'
Function BX_CONST_FUNC float pow(float _a, float _b)="_bx_"

' Returns the result of multiplying _a by 2 raised to the power of the exponent.
'
Function BX_CONST_FUNC float ldexp(float _a, int32_t _b)="_bx_"

' Returns decomposed given floating point value _a into a normalized fraction and
' an integral power of two.
'
Function float frexp(float _a, int32_t* _outExp)="_bx_"

' Returns e (2.71828...) raised to the _a power.
'
Function BX_CONST_FUNC float exp(float _a)="_bx_"

' Returns 2 raised to the _a power.
'
Function BX_CONST_FUNC float exp2(float _a)="_bx_"

' Returns the base e (2.71828...) logarithm of _a.
'
Function BX_CONST_FUNC float log(float _a)="_bx_"

' Returns the base 2 logarithm of _a.
'
Function BX_CONST_FUNC float log2(float _a)="_bx_"

' Returns the square root of _a.
'
Function BX_CONST_FUNC float sqrt(float _a)="_bx_"

' Returns reciprocal square root of _a.
'
Function BX_CONST_FUNC float rsqrt(float _a)="_bx_"

' Returns the nearest integer not greater in magnitude than _a.
'
Function BX_CONST_FUNC float trunc(float _a)="_bx_"

' Returns the fractional (or decimal) part of _a, which is greater than or equal to 0
' and less than 1.
'
Function BX_CONST_FUNC float fract(float _a)="_bx_"

' Returns result of multipla and add (_a * _b + _c).
'
Function BX_CONST_FUNC float mad(float _a, float _b, float _c)="_bx_"

' Returns the floating-point remainder of the division operation _a/_b.
'
Function BX_CONST_FUNC float mod(float _a, float _b)="_bx_"

'
Function BX_CONST_FUNC bool equal(float _a, float _b, float _epsilon)="_bx_"

'
Function BX_CONST_FUNC bool equal(const float* _a, const float* _b, uint32_t _num, float _epsilon)="_bx_"

'
Function BX_CONST_FUNC float wrap(float _a, float _wrap)="_bx_"

'
Function BX_CONST_FUNC float step(float _edge, float _a)="_bx_"

'
Function BX_CONST_FUNC float pulse(float _a, float _start, float _end)="_bx_"

'
Function BX_CONST_FUNC float smoothStep(float _a)="_bx_"

Function // References:
Function //  - Bias And Gain Are Your Friend
Function //    http://blog.demofox.org/2012/09/24/bias-and-gain-are-your-friend/
Function //  - http://demofox.org/biasgain.html
'
Function BX_CONST_FUNC float bias(float _time, float _bias)="_bx_"

'
Function BX_CONST_FUNC float gain(float _time, float _gain)="_bx_"

'
Function BX_CONST_FUNC float angleDiff(float _a, float _b)="_bx_"

' Returns shortest distance linear interpolation between two angles.
'
Function BX_CONST_FUNC float angleLerp(float _a, float _b, float _t)="_bx_"

'
Function void vec3Move(float* _result, const float* _a)="_bx_"

'
Function void vec3Abs(float* _result, const float* _a)="_bx_"

'
Function void vec3Neg(float* _result, const float* _a)="_bx_"

'
Function void vec3Add(float* _result, const float* _a, const float* _b)="_bx_"

'
Function void vec3Add(float* _result, const float* _a, float _b)="_bx_"

'
Function void vec3Sub(float* _result, const float* _a, const float* _b)="_bx_"

'
Function void vec3Sub(float* _result, const float* _a, float _b)="_bx_"

'
Function void vec3Mul(float* _result, const float* _a, const float* _b)="_bx_"

'
Function void vec3Mul(float* _result, const float* _a, float _b)="_bx_"

'
Function float vec3Dot(const float* _a, const float* _b)="_bx_"

'
Function void vec3Cross(float* _result, const float* _a, const float* _b)="_bx_"

'
Function float vec3Length(const float* _a)="_bx_"

'
Function void vec3Lerp(float* _result, const float* _a, const float* _b, float _t)="_bx_"

'
Function void vec3Lerp(float* _result, const float* _a, const float* _b, const float* _c)="_bx_"

'
Function float vec3Norm(float* _result, const float* _a)="_bx_"

'
Function void vec3Min(float* _result, const float* _a, const float* _b)="_bx_"

'
Function void vec3Max(float* _result, const float* _a, const float* _b)="_bx_"

'
Function void vec3Rcp(float* _result, const float* _a)="_bx_"

' Calculate tangent frame from normal.
'
Function void vec3TangentFrame(const float* _n, float* _t, float* _b)="_bx_"

' Calculate tangent frame from normal and angle.
'
Function void vec3TangentFrame(const float* _n, float* _t, float* _b, float _angle)="_bx_"

'
Function void vec3FromLatLong(float* _vec, float _u, float _v)="_bx_"

' Convert direction to 2D latitude and longitude.
'
' @param[out] _outU U-coordinate.
' @param[out] _outV V-coordinate.
' @param[in]  _dir Normalized direction vector.
'
Function void vec3ToLatLong(float* _outU, float* _outV, const float* _dir)="_bx_"

'
Function void quatIdentity(float* _result)="_bx_"

'
Function void quatMove(float* _result, const float* _a)="_bx_"

'
Function void quatMulXYZ(float* _result, const float* _qa, const float* _qb)="_bx_"

'
Function void quatMul(float* _result, const float* _qa, const float* _qb)="_bx_"

'
Function void quatInvert(float* _result, const float* _quat)="_bx_"

'
Function float quatDot(const float* _a, const float* _b)="_bx_"

'
Function void quatNorm(float* _result, const float* _quat)="_bx_"

'
Function void quatToEuler(float* _result, const float* _quat)="_bx_"

'
Function void quatRotateAxis(float* _result, const float* _axis, float _angle)="_bx_"

'
Function void quatRotateX(float* _result, float _ax)="_bx_"

'
Function void quatRotateY(float* _result, float _ay)="_bx_"

'
Function void quatRotateZ(float* _result, float _az)="_bx_"

'
Function void vec3MulQuat(float* _result, const float* _vec, const float* _quat)="_bx_"

'
Function void mtxIdentity(float* _result)="_bx_"

'
Function void mtxTranslate(float* _result, float _tx, float _ty, float _tz)="_bx_"

'
Function void mtxScale(float* _result, float _sx, float _sy, float _sz)="_bx_"

'
Function void mtxScale(float* _result, float _scale)="_bx_"

'
Function void mtxFromNormal(float* _result, const float* _normal, float _scale, const float* _pos)="_bx_"

'
Function void mtxFromNormal(float* _result, const float* _normal, float _scale, const float* _pos, float _angle)="_bx_"

'
Function void mtxQuat(float* _result, const float* _quat)="_bx_"

'
Function void mtxQuatTranslation(float* _result, const float* _quat, const float* _translation)="_bx_"

'
Function void mtxQuatTranslationHMD(float* _result, const float* _quat, const float* _translation)="_bx_"

'
Function void mtxLookAtLh(float* _result, const float* _eye, const float* _at, const float* _up = NULL)="_bx_"

'
Function void mtxLookAtRh(float* _result, const float* _eye, const float* _at, const float* _up = NULL)="_bx_"

'
Function void mtxLookAt(float* _result, const float* _eye, const float* _at, const float* _up = NULL)="_bx_"

'
Function void mtxProj(float* _result, float _ut, float _dt, float _lt, float _rt, float _near, float _far, bool _oglNdc)="_bx_"

'
Function void mtxProj(float* _result, const float _fov[4], float _near, float _far, bool _oglNdc)="_bx_"

'
Function void mtxProj(float* _result, float _fovy, float _aspect, float _near, float _far, bool _oglNdc)="_bx_"

'
Function void mtxProjLh(float* _result, float _ut, float _dt, float _lt, float _rt, float _near, float _far, bool _oglNdc)="_bx_"

'
Function void mtxProjLh(float* _result, const float _fov[4], float _near, float _far, bool _oglNdc)="_bx_"

'
Function void mtxProjLh(float* _result, float _fovy, float _aspect, float _near, float _far, bool _oglNdc)="_bx_"

'
Function void mtxProjRh(float* _result, float _ut, float _dt, float _lt, float _rt, float _near, float _far, bool _oglNdc)="_bx_"

'
Function void mtxProjRh(float* _result, const float _fov[4], float _near, float _far, bool _oglNdc)="_bx_"

'
Function void mtxProjRh(float* _result, float _fovy, float _aspect, float _near, float _far, bool _oglNdc)="_bx_"

'
Function void mtxProjInf(float* _result, const float _fov[4], float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjInf(float* _result, float _ut, float _dt, float _lt, float _rt, float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjInf(float* _result, float _fovy, float _aspect, float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjInfLh(float* _result, float _ut, float _dt, float _lt, float _rt, float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjInfLh(float* _result, const float _fov[4], float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjInfLh(float* _result, float _fovy, float _aspect, float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjInfRh(float* _result, float _ut, float _dt, float _lt, float _rt, float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjInfRh(float* _result, const float _fov[4], float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjInfRh(float* _result, float _fovy, float _aspect, float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjRevInfLh(float* _result, float _ut, float _dt, float _lt, float _rt, float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjRevInfLh(float* _result, const float _fov[4], float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjRevInfLh(float* _result, float _fovy, float _aspect, float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjRevInfRh(float* _result, float _ut, float _dt, float _lt, float _rt, float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjRevInfRh(float* _result, const float _fov[4], float _near, bool _oglNdc)="_bx_"

'
Function void mtxProjRevInfRh(float* _result, float _fovy, float _aspect, float _near, bool _oglNdc)="_bx_"

'
Function void mtxOrtho(float* _result, float _left, float _right, float _bottom, float _top, float _near, float _far, float _offset, bool _oglNdc)="_bx_"

'
Function void mtxOrthoLh(float* _result, float _left, float _right, float _bottom, float _top, float _near, float _far, float _offset, bool _oglNdc)="_bx_"

'
Function void mtxOrthoRh(float* _result, float _left, float _right, float _bottom, float _top, float _near, float _far, float _offset, bool _oglNdc)="_bx_"

'
Function void mtxRotateX(float* _result, float _ax)="_bx_"

'
Function void mtxRotateY(float* _result, float _ay)="_bx_"

'
Function void mtxRotateZ(float* _result, float _az)="_bx_"

'
Function void mtxRotateXY(float* _result, float _ax, float _ay)="_bx_"

'
Function void mtxRotateXYZ(float* _result, float _ax, float _ay, float _az)="_bx_"

'
Function void mtxRotateZYX(float* _result, float _ax, float _ay, float _az)="_bx_"

'
Function void mtxSRT(float* _result, float _sx, float _sy, float _sz, float _ax, float _ay, float _az, float _tx, float _ty, float _tz)="_bx_"

'
Function void vec3MulMtx(float* _result, const float* _vec, const float* _mat)="_bx_"

'
Function void vec3MulMtxXyz0(float* _result, const float* _vec, const float* _mat)="_bx_"

'
Function void vec3MulMtxH(float* _result, const float* _vec, const float* _mat)="_bx_"

'
Function void vec4Mul(float* _result, const float* _a, const float* _b)="_bx_"

'
Function void vec4Mul(float* _result, const float* _a, float _b)="_bx_"

'
Function void vec4MulMtx(float* _result, const float* _vec, const float* _mat)="_bx_"

'
Function void mtxMul(float* _result, const float* _a, const float* _b)="_bx_"

'
Function void mtxTranspose(float* _result, const float* _a)="_bx_"

'
Function void mtx3Inverse(float* _result, const float* _a)="_bx_"

'
Function void mtxInverse(float* _result, const float* _a)="_bx_"

' Convert LH to RH projection matrix and vice versa.
'
Function void mtxProjFlipHandedness(float* _dst, const float* _src)="_bx_"

' Convert LH to RH view matrix and vice versa.
'
Function void mtxViewFlipHandedness(float* _dst, const float* _src)="_bx_"

'
Function void calcNormal(float _result[3], const float _va[3], const float _vb[3], const float _vc[3])="_bx_"

'
Function void calcPlane(float _result[4], const float _va[3], const float _vb[3], const float _vc[3])="_bx_"

'
Function void calcLinearFit2D(float _result[2], const void* _points, uint32_t _stride, uint32_t _numPoints)="_bx_"

'
Function void calcLinearFit3D(float _result[3], const void* _points, uint32_t _stride, uint32_t _numPoints)="_bx_"

'
Function void rgbToHsv(float _hsv[3], const float _rgb[3])="_bx_"

'
Function void hsvToRgb(float _rgb[3], const float _hsv[3])="_bx_"

'
Function BX_CONST_FUNC float toLinear(float _a)="_bx_"

'
Function BX_CONST_FUNC float toGamma(float _a)="_bx_"
