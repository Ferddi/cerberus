
#MOJO_AUTO_SUSPEND_ENABLED = False

#GLFW_WINDOW_WIDTH          = 1280
#GLFW_WINDOW_HEIGHT         = 720

' using DrawText to draw some bgfx debug text
Import mojo1bgfx

' remove DrawText codes and use these minimal imports
'Import mojo.app
'Import bgfx
'
'Import mojo.input

Function BoolToInt:Int( bb:Bool )
	If bb = True Then Return 1
	Return 0
End

Class PosTangentBitangentTexcoordVertex

	Const SIZE_IN_BYTES:Int = 7 * 4

	Field m_x         :Float
	Field m_y         :Float
	Field m_z         :Float

	Field m_tangent   :Int
	Field m_bitangent :Int

	Field m_u         :Float
	Field m_v         :Float

	Method New( _x:Float, _y:Float, _z:Float, _tangent:Int, _bitangent:Int, _u:Float, _v:Float )

		Self.m_x         = _x
		Self.m_y         = _y
		Self.m_z         = _z

		Self.m_tangent   = _tangent
		Self.m_bitangent = _bitangent

		Self.m_u         = _u
		Self.m_v         = _v
	End

	Global ms_decl := New BgfxVertexDecl()

	Function Init:Void()
		bgfxVertexDeclBegin( ms_decl )
		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_POSITION,  3, BGFX_ATTRIB_TYPE_FLOAT )
		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_TANGENT,   4, BGFX_ATTRIB_TYPE_UINT8, True, True )
		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_BITANGENT, 4, BGFX_ATTRIB_TYPE_UINT8, True, True )
		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_TEXCOORD0, 2, BGFX_ATTRIB_TYPE_FLOAT, True, True )
		bgfxVertexDeclEnd( ms_decl )
	End
End

Function PosTangentBitangentTexcoordVertexToDataBuffer:Void( _verticesDb:DataBuffer, _vertices:PosTangentBitangentTexcoordVertex[] )

	Local bufferAddress  :Int = 0
	Local verticesCount  :Int = _vertices.Length()

	For Local ii:Int = 0 Until verticesCount

		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_x ) ; bufferAddress += 4
		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_y ) ; bufferAddress += 4
		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_z ) ; bufferAddress += 4

		_verticesDb.PokeInt( bufferAddress, _vertices[ ii ].m_tangent ) ; bufferAddress += 4
		_verticesDb.PokeInt( bufferAddress, _vertices[ ii ].m_bitangent ) ; bufferAddress += 4

		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_u ) ; bufferAddress += 4
		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_v ) ; bufferAddress += 4
	Next
End

Function Index16ToDataBuffer:Void( _indicesDb:DataBuffer, _indices:Int[] )

	Local bufferAddress :Int = 0
	Local indicesCount  :Int = _indices.Length()

	For Local ii:Int = 0 Until indicesCount
		_indicesDb.PokeShort( bufferAddress, _indices[ ii ] ) ; bufferAddress += 2
	Next
End

Function PackUint32:Int( _x:Int, _y:Int, _z:Int, _w:Int )

	Local result:Int = _x & $ff

	result |= (_y & $ff) Shl  8
	result |= (_z & $ff) Shl 16
	result |= (_w & $ff) Shl 24

	Print "_x=" + _x + " _y=" + _y + " _z=" + _z + " hex=" + IntToHex( result )

	Return result
End

Function PackF4u:Int( _x:Float, _y:Float=0.0, _z:Float=0.0, _w:Float=0.0 )

	Local xx :Int = Int( _x * 127.0 + 128.0 )
	Local yy :Int = Int( _y * 127.0 + 128.0 )
	Local zz :Int = Int( _z * 127.0 + 128.0 )
	Local ww :Int = Int( _w * 127.0 + 128.0 )

	Return PackUint32( xx, yy, zz, ww )
End

Global s_cubeVertices:PosTangentBitangentTexcoordVertex[] = [ ' [24] =
	New PosTangentBitangentTexcoordVertex( -1.0, -1.0,  1.0, PackF4u( -1.0,  0.0,  0.0 ), PackF4u(  0.0, -1.0,  0.0 ),   1.0,  1.0 ), ' Back
	New PosTangentBitangentTexcoordVertex(  1.0,  1.0,  1.0, PackF4u( -1.0,  0.0,  0.0 ), PackF4u(  0.0, -1.0,  0.0 ),   0.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0,  1.0,  1.0, PackF4u( -1.0,  0.0,  0.0 ), PackF4u(  0.0, -1.0,  0.0 ),   1.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex(  1.0, -1.0,  1.0, PackF4u( -1.0,  0.0,  0.0 ), PackF4u(  0.0, -1.0,  0.0 ),   0.0,  1.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0, -1.0, -1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0, -1.0,  0.0 ),   0.0,  1.0 ), ' Front
	New PosTangentBitangentTexcoordVertex(  1.0,  1.0, -1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0, -1.0,  0.0 ),   1.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0,  1.0, -1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0, -1.0,  0.0 ),   0.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex(  1.0, -1.0, -1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0, -1.0,  0.0 ),   1.0,  1.0 ),
	New PosTangentBitangentTexcoordVertex(  1.0, -1.0, -1.0, PackF4u(  0.0,  0.0,  1.0 ), PackF4u(  0.0, -1.0,  0.0 ),   0.0,  1.0 ), ' Right
	New PosTangentBitangentTexcoordVertex(  1.0,  1.0,  1.0, PackF4u(  0.0,  0.0,  1.0 ), PackF4u(  0.0, -1.0,  0.0 ),   1.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex(  1.0, -1.0,  1.0, PackF4u(  0.0,  0.0,  1.0 ), PackF4u(  0.0, -1.0,  0.0 ),   1.0,  1.0 ),
	New PosTangentBitangentTexcoordVertex(  1.0,  1.0, -1.0, PackF4u(  0.0,  0.0,  1.0 ), PackF4u(  0.0, -1.0,  0.0 ),   0.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0, -1.0, -1.0, PackF4u(  0.0,  0.0, -1.0 ), PackF4u(  0.0, -1.0,  0.0 ),   1.0,  1.0 ), ' Left
	New PosTangentBitangentTexcoordVertex( -1.0,  1.0,  1.0, PackF4u(  0.0,  0.0, -1.0 ), PackF4u(  0.0, -1.0,  0.0 ),   0.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0, -1.0,  1.0, PackF4u(  0.0,  0.0, -1.0 ), PackF4u(  0.0, -1.0,  0.0 ),   0.0,  1.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0,  1.0, -1.0, PackF4u(  0.0,  0.0, -1.0 ), PackF4u(  0.0, -1.0,  0.0 ),   1.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0,  1.0, -1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0,  0.0, -1.0 ),   0.0,  1.0 ), ' Top
	New PosTangentBitangentTexcoordVertex(  1.0,  1.0,  1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0,  0.0, -1.0 ),   1.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0,  1.0,  1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0,  0.0, -1.0 ),   0.0,  0.0 ),
	New PosTangentBitangentTexcoordVertex(  1.0,  1.0, -1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0,  0.0, -1.0 ),   1.0,  1.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0, -1.0, -1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0,  0.0,  1.0 ),   0.0,  0.0 ), ' Bottom
	New PosTangentBitangentTexcoordVertex(  1.0, -1.0,  1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0,  0.0,  1.0 ),   1.0,  1.0 ),
	New PosTangentBitangentTexcoordVertex( -1.0, -1.0,  1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0,  0.0,  1.0 ),   0.0,  1.0 ),
	New PosTangentBitangentTexcoordVertex(  1.0, -1.0, -1.0, PackF4u(  1.0,  0.0,  0.0 ), PackF4u(  0.0,  0.0,  1.0 ),   1.0,  0.0 ) ]

Global s_cubeIndices:Int[] = [ ' [36] =
	0 , 1 , 2 ,
	0 , 3 , 1 ,
	4 , 6 , 5 ,
	4 , 5 , 7 ,

	8 , 9 , 10,
	8 , 11, 9 ,
	12, 14, 13,
	12, 13, 15,

	16, 18, 17,
	16, 17, 19,
	20, 21, 22,
	20, 23, 21 ]

Class PomExample Extends App

	Field bgfxCaps               := New BgfxCaps()

	Field m_vbh                  :Int ' bgfx::VertexBufferHandle
	Field m_ibh                  :Int ' bgfx::IndexBufferHandle

	Field s_texColor             :Int ' bgfx::UniformHandle
	Field s_texNormal            :Int ' bgfx::UniformHandle
	Field s_texDepth             :Int ' bgfx::UniformHandle

	Field u_light_pos            :Int ' bgfx::UniformHandle
	Field u_norm_mtx             :Int ' bgfx::UniformHandle
	Field u_pomParam             :Int ' bgfx::UniformHandle

	Field m_program              :Int ' bgfx::ProgramHandle

	Field m_textureColor         :Int ' bgfx::TextureHandle
	Field m_textureNormal        :Int ' bgfx::TextureHandle
	Field m_textureDepth         :Int ' bgfx::TextureHandle

	Field m_width                :Int
	Field m_height               :Int
	Field m_debug                :Int = BGFX_DEBUG_NONE
'  	Field m_debug                :Int = BGFX_DEBUG_TEXT
	Field m_reset                :Int
	Field m_timeOffset           :Int

	Field m_shading_type         :Int
	Field m_show_diffuse_texture :Bool
	Field m_parallax_scale       :Int
	Field m_num_steps            :Int

	Field s_cubeVerticesDb       :DataBuffer
	Field s_cubeIndicesDb        :DataBuffer

	Field state                  :Int[ 2 ]

	Method OnCreate:Int()

		SetUpdateRate( 60 )

		m_width  = DeviceWidth()
		m_height = DeviceHeight()
		m_debug  = BGFX_DEBUG_NONE
		m_reset  = BGFX_RESET_VSYNC ' <-- not used because init is in target

'  		bgfx::Init init;
'  		init.type     = args.m_type;
'  		init.vendorId = args.m_pciId;
'  		init.resolution.width  = m_width;
'  		init.resolution.height = m_height;
'  		init.resolution.reset  = m_reset;
'  		bgfx::init(init);

		' Enable debug text.
		bgfxSetDebug( m_debug )

		' Set view 0 clear state.
		bgfxSetViewClear( 0, BGFX_CLEAR_COLOR | BGFX_CLEAR_DEPTH, $303030ff, 1.0, 0 )

		' Create vertex stream declaration.
		PosTangentBitangentTexcoordVertex.Init()

		' Create static vertex buffer.
		s_cubeVerticesDb = New DataBuffer( s_cubeVertices.Length() * PosTangentBitangentTexcoordVertex.SIZE_IN_BYTES )
		PosTangentBitangentTexcoordVertexToDataBuffer( s_cubeVerticesDb, s_cubeVertices )
		m_vbh = bgfxCreateVertexBuffer( bgfxUtilsMakeRef( s_cubeVerticesDb ), PosTangentBitangentTexcoordVertex.ms_decl )

		' Create static index buffer.
		s_cubeIndicesDb = New DataBuffer( s_cubeIndices.Length() * 2 )
		Index16ToDataBuffer( s_cubeIndicesDb, s_cubeIndices )
		m_ibh = bgfxCreateIndexBuffer( bgfxUtilsMakeRef( s_cubeIndicesDb ) )

		' Create texture sampler uniforms.
		s_texColor  = bgfxCreateUniform( "s_texColor",  BGFX_UNIFORM_TYPE_INT1 )
		s_texNormal = bgfxCreateUniform( "s_texNormal", BGFX_UNIFORM_TYPE_INT1 )
		s_texDepth  = bgfxCreateUniform( "s_texDepth",  BGFX_UNIFORM_TYPE_INT1 )

		u_light_pos = bgfxCreateUniform( "u_light_pos", BGFX_UNIFORM_TYPE_VEC4 )
		u_norm_mtx  = bgfxCreateUniform( "u_norm_mtx",  BGFX_UNIFORM_TYPE_MAT4 )
		u_pomParam  = bgfxCreateUniform( "u_pomParam",  BGFX_UNIFORM_TYPE_VEC4 )

		' Create program from shaders.
		m_program = bgfxUtilsLoadProgram( "vs_pom", "fs_pom" )

		' Load diffuse texture.
		m_textureColor = bgfxUtilsLoadTexture( "textures/parallax-d.ktx" )

		' Load normal texture.
		m_textureNormal = bgfxUtilsLoadTexture( "textures/parallax-n.ktx" )

		' Load depth texture.
		m_textureDepth = bgfxUtilsLoadTexture( "textures/parallax-h.ktx" )

		m_timeOffset = Millisecs()
		m_shading_type = 4
		m_show_diffuse_texture = True
		m_parallax_scale = 50
		m_num_steps = 16

		Return 0
	End

	Method OnUpdate:Int()
		Return 0
	End

	'
	' @Bug: Crash when trying to destroy bgfx
	'
'  	Method OnClose:Int()
'  
'  		' Cleanup.
'  		bgfxDestroyIndexBuffer( m_ibh )
'  
'  		bgfxDestroyVertexBuffer( m_vbh )
'  
'  		bgfxDestroyProgram( m_program )
'  
'  		bgfxDestroyTexture( m_textureColor )
'  		bgfxDestroyTexture( m_textureNormal )
'  		bgfxDestroyTexture( m_textureDepth )
'  
'  		bgfxDestroyUniform( s_texColor )
'  		bgfxDestroyUniform( s_texNormal )
'  		bgfxDestroyUniform( s_texDepth )
'  
'  		bgfxDestroyUniform( u_light_pos )
'  		bgfxDestroyUniform( u_norm_mtx )
'  		bgfxDestroyUniform( u_pomParam )
'  
'  		' Shutdown bgfx.
'  		bgfxShutdown()
'  
'  		Return 0
'  	End

	Method OnRender:Int()

		bgfxGetCaps( bgfxCaps )

		' Set view 0 default viewport.
		bgfxSetViewRect( 0, 0, 0, m_width, m_height )

		' This dummy draw call is here to make sure that view 0 is cleared
		' if no other draw calls are submitted to view 0.
		bgfxTouch( 0 )

		Local now  :Int   = Millisecs()
		Local time :Float = Float( now - m_timeOffset ) * 0.001

		Local at  :Float[] = [ 0.0, 0.0, 1.0 ]
		Local eye :Float[] = [ 0.0, 0.0, 0.0 ]

		' Set view and projection matrix for view 0.
		' {
			Local view:Float[ 16 ]
			bxMtxLookAt( view, eye, at )

			Local proj:Float[ 16 ]
			bxMtxProj( proj, 60.0, Float( m_width ) / Float( m_height ), 0.1, 100.0, bgfxCaps.GetHomogeneousDepth() )
			bgfxSetViewTransform( 0, view, proj )

			' Set view 0 default viewport.
			bgfxSetViewRect( 0, 0, 0, m_width, m_height )
		' }

		DrawText( "Settings", 8, 14 * 1 )

		DrawText( "No bump mapping",            8, 14 * 2 ) ' m_shading_type = 0
		DrawText( "Normal mapping",             8, 14 * 3 ) ' m_shading_type = 1
		DrawText( "Parallax mapping",           8, 14 * 4 ) ' m_shading_type = 2
		DrawText( "Steep parallax mapping",     8, 14 * 5 ) ' m_shading_type = 3
		DrawText( "Parallax occlusion mapping", 8, 14 * 6 ) ' m_shading_type = 4

		DrawText( "Show diffuse texture", 8, 14 * 7 ) ' m_show_diffuse_texture = true or false

'  		if (m_shading_type > 1)
'  		{
'  			ImGui::Separator();
'  
'  			float multiplier = 1000.0f;
'  			float x = (float)m_parallax_scale / multiplier;
'  			ImGui::SliderFloat("Parallax scale", &x, 0.0f, 0.1f);
'  			m_parallax_scale = (int32_t)(x * multiplier);
'  		}
'  
'  		if (m_shading_type > 2)
'  		{
'  			ImGui::Separator();
'  
'  			ImGui::SliderInt("Number of steps", &m_num_steps, 1, 32);
'  		}

		Local lightPos:Float[] = [ 1.0, 2.0, 0.0, 0.0 ]
		bgfxSetUniform( u_light_pos, lightPos )

		Local a   :Float[ 16 ]
		Local b   :Float[ 16 ]
		Local c   :Float[ 16 ]
		Local d   :Float[ 16 ]
		Local mtx :Float[ 16 ]
		bxMtxRotateY( a, time * 0.4 )
		bxMtxRotateX( b, 0.4 )
		bxMtxMul( c, a, b )
		bxMtxTranslate( d, 0.0, 0.0, 4.0 )
		bxMtxMul( mtx, c, d )

		' Set transform for draw call.
		bgfxSetTransform( mtx )

		Local pomParam:Float[] = [
			Float( m_shading_type ),
			Float( BoolToInt( m_show_diffuse_texture ) ),
			Float( m_parallax_scale ),
			Float( m_num_steps ) ]

		bgfxSetUniform( u_pomParam, pomParam )

		' Set normal matrix uniform
		Local inv       :Float[ 16 ]
		Local transpose :Float[ 16 ]
		bxMtxInverse( inv, mtx )
		bxMtxTranspose( transpose, inv )
		bgfxSetUniform( u_norm_mtx, transpose )

		' Set vertex and index buffer.
		bgfxSetVertexBuffer( 0, m_vbh )
		bgfxSetIndexBuffer( m_ibh )

		' Bind textures.
		bgfxSetTexture( 0, s_texColor,  m_textureColor )
		bgfxSetTexture( 1, s_texNormal, m_textureNormal )
		bgfxSetTexture( 2, s_texDepth,  m_textureDepth )

		' Set render states.
		bgfxUtilsClear64Bit( state )
		bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_RGB )
		bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_A )
		bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_Z )
		bgfxUtilsSet64Bit( state, BGFX_STATE_DEPTH_TEST_LESS )
		bgfxUtilsSet64Bit( state, BGFX_STATE_MSAA )
		bgfxSetState( state )

		' Submit primitive for rendering to view 0.
		bgfxSubmit(0, m_program)

		' Advance to next frame. Rendering thread will be kicked to
		' process submitted rendering primitives.
		'
		' bgfxFrame is done in the while loop of method void BBGlfwGame::Run() 
		' in file targets\glfw3_bgfx\modules\native\glfwgame.cpp
		' it is done after method RenderGame(), where glfwSwapBuffers used to be
		'
		' bgfxFrame()

		Return 0
	End

End

Function Main:Int()
	Print "Title: 33-pom"
	Print "Description: Parallax mapping."
	New PomExample()
	Return 0
End
