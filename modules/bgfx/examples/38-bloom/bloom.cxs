
#MOJO_AUTO_SUSPEND_ENABLED = False

#GLFW_WINDOW_WIDTH          = 1280
#GLFW_WINDOW_HEIGHT         = 720

' using DrawText to draw some bgfx debug text
Import mojo1bgfx

' remove DrawText codes and use these minimal imports
'Import mojo.app
'Import bgfx
'
'Import mojo.input

Import camera

' pass that render the geometry of the boxes.
Const RENDER_PASS_GEOMETRY_ID    :Int = 0

' the first downsample pass.
Const RENDER_PASS_DOWNSAMPLE0_ID :Int = 1

' the first upsample pass.
Const RENDER_PASS_UPSAMPLE0_ID   :Int = ( (TEX_CHAIN_LEN-1)  + 1)

' the final pass the combines the bloom with the g-buffer.
Const RENDER_PASS_COMBINE_ID     :Int = ( (TEX_CHAIN_LEN-1) + 1 + (TEX_CHAIN_LEN-1) )

' number of downsampled and then upsampled textures(used for bloom.)
Const TEX_CHAIN_LEN              :Int = 5

Global s_texelHalf:Float = 0.0

Class PosVertex

	Const SIZE_IN_BYTES:Int = 3 * 4

	Field m_x :Float
	Field m_y :Float
	Field m_z :Float

	Method New( _x:Float, _y:Float, _z:Float )
		Self.m_x = _x
		Self.m_y = _y
		Self.m_z = _z
	End

	Global ms_decl := New BgfxVertexDecl()

	Function Init:Void()
		bgfxVertexDeclBegin( ms_decl )
		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_POSITION, 3, BGFX_ATTRIB_TYPE_FLOAT )
		bgfxVertexDeclEnd( ms_decl )
	End
End

Class PosTexCoord0Vertex

	Const SIZE_IN_BYTES:Int = 3 * 4 + 2 * 4

	Field m_x :Float
	Field m_y :Float
	Field m_z :Float

	Field m_u :Float
	Field m_v :Float

	Method New( _x:Float, _y:Float, _z:Float, _u:Float, _v:Float )

		Self.m_x = _x
		Self.m_y = _y
		Self.m_z = _z

		Self.m_u = _u
		Self.m_v = _v
	End

	Global ms_decl := New BgfxVertexDecl()

	Function Init:Void()
		bgfxVertexDeclBegin( ms_decl )
		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_POSITION,  3, BGFX_ATTRIB_TYPE_FLOAT )
		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_TEXCOORD0, 2, BGFX_ATTRIB_TYPE_FLOAT )
		bgfxVertexDeclEnd( ms_decl )
	End
End

Function PosVertexToDataBuffer:DataBuffer( _vertices:PosVertex[], _verticesDb:DataBuffer=Null )

	Local bufferAddress :Int = 0
	Local verticesCount :Int = _vertices.Length()

	If Not _verticesDb Then
		_verticesDb = New DataBuffer( verticesCount * PosVertex.SIZE_IN_BYTES )
	Endif

	For Local ii:Int = 0 Until verticesCount

		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_x ) ; bufferAddress += 4
		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_y ) ; bufferAddress += 4
		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_z ) ; bufferAddress += 4
	Next

	Return _verticesDb
End

Function PosTexCoord0VertexToDataBuffer:DataBuffer( _vertices:PosTexCoord0Vertex[], _verticesDb:DataBuffer=Null )

	Local bufferAddress :Int = 0
	Local verticesCount :Int = _vertices.Length()

	If Not _verticesDb Then
		_verticesDb = New DataBuffer( verticesCount * PosTexCoord0Vertex.SIZE_IN_BYTES )
	Endif

	For Local ii:Int = 0 Until verticesCount

		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_x ) ; bufferAddress += 4
		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_y ) ; bufferAddress += 4
		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_z ) ; bufferAddress += 4

		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_u ) ; bufferAddress += 4
		_verticesDb.PokeFloat( bufferAddress, _vertices[ ii ].m_v ) ; bufferAddress += 4
	Next

	Return _verticesDb
End

Function Index16ToDataBuffer:DataBuffer( _indices:Int[], _indicesDb:DataBuffer=Null )

	Local bufferAddress :Int = 0
	Local indicesCount  :Int = _indices.Length()

	If Not _indicesDb Then
		_indicesDb = New DataBuffer( indicesCount * 2 )
	Endif

	For Local ii:Int = 0 Until indicesCount
		_indicesDb.PokeShort( bufferAddress, _indices[ ii ] ) ; bufferAddress += 2
	Next

	Return _indicesDb
End

Global cs:Float = 0.29

Global s_cubeVertices:PosVertex[] = [
	New PosVertex( -cs,  cs,  cs ),
	New PosVertex(  cs,  cs,  cs ),
	New PosVertex( -cs, -cs,  cs ),
	New PosVertex(  cs, -cs,  cs ),
	New PosVertex( -cs,  cs, -cs ),
	New PosVertex(  cs,  cs, -cs ),
	New PosVertex( -cs, -cs, -cs ),
	New PosVertex(  cs, -cs, -cs ),
	New PosVertex( -cs,  cs,  cs ),
	New PosVertex(  cs,  cs,  cs ),
	New PosVertex( -cs,  cs, -cs ),
	New PosVertex(  cs,  cs, -cs ),
	New PosVertex( -cs, -cs,  cs ),
	New PosVertex(  cs, -cs,  cs ),
	New PosVertex( -cs, -cs, -cs ),
	New PosVertex(  cs, -cs, -cs ),
	New PosVertex(  cs, -cs,  cs ),
	New PosVertex(  cs,  cs,  cs ),
	New PosVertex(  cs, -cs, -cs ),
	New PosVertex(  cs,  cs, -cs ),
	New PosVertex( -cs, -cs,  cs ),
	New PosVertex( -cs,  cs,  cs ),
	New PosVertex( -cs, -cs, -cs ),
	New PosVertex( -cs,  cs, -cs ) ]

Global s_cubeIndices:Int[] = [
	 0,  2,  1,
	 1,  2,  3,
	 4,  5,  6,
	 5,  7,  6,

	 8, 10,  9,
	 9, 10, 11,
	12, 13, 14,
	13, 15, 14,

	16, 18, 17,
	17, 18, 19,
	20, 21, 22,
	21, 23, 22 ]

Global _tvb := New BgfxTransientVertexBuffer()

Function ScreenSpaceQuad:Void( _textureWidth:Float, _textureHeight:Float, _texelHalf:Float, _originBottomLeft:Bool=False, _width:Float=1.0, _height:Float=1.0 )

	If 3 = bgfxGetAvailTransientVertexBuffer( 3, PosTexCoord0Vertex.ms_decl ) Then

		bgfxAllocTransientVertexBuffer( _tvb, 3, PosTexCoord0Vertex.ms_decl )

		Local vertex     :Int   = 0 

		Local zz         :Float = 0.0

		Local minx       :Float = -_width
		Local maxx       :Float =  _width
		Local miny       :Float = 0.0
		Local maxy       :Float = _height * 2.0

		Local texelHalfW :Float = _texelHalf / _textureWidth
		Local texelHalfH :Float = _texelHalf / _textureHeight
		Local minu       :Float = -1.0 + texelHalfW
		Local maxu       :Float =  1.0 + texelHalfW

		Local minv       :Float = texelHalfH
		Local maxv       :Float = 2.0 + texelHalfH

		If _originBottomLeft Then

			Local temp:Float = minv
			minv = maxv
			maxv = temp

			minv -= 1.0
			maxv -= 1.0
		Endif

		_tvb.PokeFloat( vertex, minx ) ; vertex += 4
		_tvb.PokeFloat( vertex, miny ) ; vertex += 4
		_tvb.PokeFloat( vertex, zz   ) ; vertex += 4
		_tvb.PokeFloat( vertex, minu ) ; vertex += 4
		_tvb.PokeFloat( vertex, minv ) ; vertex += 4

		_tvb.PokeFloat( vertex, maxx ) ; vertex += 4
		_tvb.PokeFloat( vertex, miny ) ; vertex += 4
		_tvb.PokeFloat( vertex, zz   ) ; vertex += 4
		_tvb.PokeFloat( vertex, maxu ) ; vertex += 4
		_tvb.PokeFloat( vertex, minv ) ; vertex += 4

		_tvb.PokeFloat( vertex, maxx ) ; vertex += 4
		_tvb.PokeFloat( vertex, maxy ) ; vertex += 4
		_tvb.PokeFloat( vertex, zz   ) ; vertex += 4
		_tvb.PokeFloat( vertex, maxu ) ; vertex += 4
		_tvb.PokeFloat( vertex, maxv ) ; vertex += 4

		bgfxSetTransientVertexBuffer( 0, _tvb )
	Endif
End

Class BloomExample Extends App

	Field m_caps              := New BgfxCaps()

	Field m_width             :Int ' use DeviceWidth directly
	Field m_height            :Int ' use DeviceHeight directly
'  	Field m_debug             :Int = BGFX_DEBUG_NONE
	Field m_debug             :Int ' = BGFX_DEBUG_TEXT
	Field m_reset             :Int ' = BGFX_RESET_VSYNC

	Field m_oldWidth          :Int
	Field m_oldHeight         :Int
	Field m_oldReset          :Int

	Field m_vbh               :Int ' bgfx::VertexBufferHandle
	Field m_ibh               :Int ' bgfx::IndexBufferHandle

	Field s_albedo            :Int ' bgfx::UniformHandle
	Field s_tex               :Int ' bgfx::UniformHandle
	Field s_depth             :Int ' bgfx::UniformHandle
	Field s_light             :Int ' bgfx::UniformHandle
	Field u_pixelSize         :Int ' bgfx::UniformHandle
	Field u_intensity         :Int ' bgfx::UniformHandle
	Field u_color             :Int ' bgfx::UniformHandle

	Field u_mtx               :Int ' bgfx::UniformHandle

	Field m_geomProgram       :Int ' bgfx::ProgramHandle
	Field m_downsampleProgram :Int ' bgfx::ProgramHandle
	Field m_upsampleProgram   :Int ' bgfx::ProgramHandle
	Field m_combineProgram    :Int ' bgfx::ProgramHandle

	Field m_gbuffer           :Int ' bgfx::FrameBufferHandle
	Field m_texChainFb        :Int[ TEX_CHAIN_LEN ] ' bgfx::FrameBufferHandle

	Field m_intensity         :Float = 1.0

	Field m_scrollArea        :Int

	Field m_timeOffset        :Int

	Method OnCreate:Int()

		SetUpdateRate( 60 )

		m_width  = DeviceWidth()
		m_height = DeviceHeight()
		m_debug  = BGFX_DEBUG_TEXT
		m_reset  = BGFX_RESET_VSYNC ' <-- not used because init is in target

'  		bgfx::Init init;
'  		init.type     = args.m_type;
'  		init.vendorId = args.m_pciId;
'  		init.resolution.width  = m_width;
'  		init.resolution.height = m_height;
'  		init.resolution.reset  = m_reset;
'  		bgfx::init(init);

		' Enable m_debug text.
		bgfxSetDebug( m_debug )

		' Set palette color for index 0
		bgfxSetPaletteColor( 0, $00000000 )

		' Set geometry pass view clear state.
		bgfxSetViewClearMrt( RENDER_PASS_GEOMETRY_ID, BGFX_CLEAR_COLOR | BGFX_CLEAR_DEPTH, 1.0, 0, 0, 0 )

		' we need to clear the textures in the chain, before downsampling into them.
		For Local ii:Int = 0 Until TEX_CHAIN_LEN -1
			bgfxSetViewClear( RENDER_PASS_DOWNSAMPLE0_ID + ii, BGFX_CLEAR_COLOR | BGFX_CLEAR_DEPTH, 1.0, 0, 0 )
		Next

		' Create vertex stream declaration.
		PosVertex.Init()
		PosTexCoord0Vertex.Init()

		' Create static vertex buffer.
		m_vbh = bgfxCreateVertexBuffer( bgfxUtilsMakeRef( PosVertexToDataBuffer( s_cubeVertices ) ), PosVertex.ms_decl )

		m_ibh = bgfxCreateIndexBuffer( bgfxUtilsMakeRef( Index16ToDataBuffer( s_cubeIndices ) ) )

		s_albedo    = bgfxCreateUniform( "s_albedo",    BGFX_UNIFORM_TYPE_INT1 )
		s_tex       = bgfxCreateUniform( "s_tex",       BGFX_UNIFORM_TYPE_INT1 )
		s_depth     = bgfxCreateUniform( "s_depth",     BGFX_UNIFORM_TYPE_INT1 )
		s_light     = bgfxCreateUniform( "s_light",     BGFX_UNIFORM_TYPE_INT1 )
		u_pixelSize = bgfxCreateUniform( "u_pixelSize", BGFX_UNIFORM_TYPE_VEC4 )
		u_intensity = bgfxCreateUniform( "u_intensity", BGFX_UNIFORM_TYPE_VEC4 )
		u_color     = bgfxCreateUniform( "u_color",     BGFX_UNIFORM_TYPE_VEC4 )
		u_mtx       = bgfxCreateUniform( "u_mtx",       BGFX_UNIFORM_TYPE_MAT4 )

		' Create program from shaders.
		m_geomProgram       = bgfxUtilsLoadProgram( "vs_albedo_output", "fs_albedo_output" )
		m_downsampleProgram = bgfxUtilsLoadProgram( "vs_fullscreen",    "fs_downsample" )
		m_upsampleProgram   = bgfxUtilsLoadProgram( "vs_fullscreen",    "fs_upsample" )
		m_combineProgram    = bgfxUtilsLoadProgram( "vs_fullscreen",    "fs_bloom_combine" )

		m_gbuffer = BGFX_INVALID_HANDLE

		For Local ii:Int = 0 Until TEX_CHAIN_LEN
			m_texChainFb[ ii ] = BGFX_INVALID_HANDLE
		Next

		m_timeOffset = Millisecs()
		Local renderer:Int = bgfxGetRendererType()
		If renderer = BGFX_RENDERER_TYPE_DIRECT3D9 Then s_texelHalf = 0.5 Else s_texelHalf = 0.0

		' Get renderer capabilities info.
		bgfxGetCaps( m_caps )

		m_oldWidth  = 0
		m_oldHeight = 0
		m_oldReset  = m_reset

		m_scrollArea = 0

		CameraCreate()

		Local initialPos:Float[] = [ 0.0, 0.0, -15.0 ]
		CameraSetPosition( initialPos )
		CameraSetVerticalAngle( 0.0 )

		Return 0
	End

	Method OnUpdate:Int()

		If KeyDown( KEY_LEFT ) Then
			m_intensity -= 0.02
			If m_intensity <= 0.0 Then m_intensity = 0.0
		Endif

		If KeyDown( KEY_RIGHT ) Then
			m_intensity += 0.02
			If m_intensity >= 3.0 Then m_intensity = 3.0
		Endif

		Return 0
	End

	'
	' @Bug: Crash when trying to destroy bgfx
	'
'  	Method OnClose:Int()
'  
'  		' Cleanup.
'  		CameraDestroy();
'  
'  		If bgfxIsValid( m_gbuffer )
'  			bgfxDestroyFrameBuffer(m_gbuffer)
'  		Endif
'  
'  		For Local ii:Int = 0 Until TEX_CHAIN_LEN
'  			bgfxDestroyFrameBuffer( m_texChainFb[ ii ] )
'  		Next
'  
'  		bgfxDestroyIndexBuffer( m_ibh )
'  		bgfxDestroyVertexBuffer( m_vbh )
'  
'  		bgfxDestroyProgram( m_geomProgram )
'  		bgfxDestroyProgram( m_downsampleProgram )
'  		bgfxDestroyProgram( m_upsampleProgram )
'  		bgfxDestroyProgram( m_combineProgram )
'  
'  		bgfxDestroyUniform( s_albedo )
'  		bgfxDestroyUniform( s_tex )
'  		bgfxDestroyUniform( s_depth )
'  		bgfxDestroyUniform( s_light )
'  
'  		bgfxDestroyUniform( u_mtx )
'  		bgfxDestroyUniform( u_pixelSize )
'  		bgfxDestroyUniform( u_intensity )
'  		bgfxDestroyUniform( u_color )
'  
'  		' Shutdown bgfx.
'  		bgfxShutdown()
'  
'  		Return 0
'  	End

'  	Field idenMtx:Float[] = [
'  		1.0, 0.0, 0.0, 0.0,
'  		0.0, 1.0, 0.0, 0.0,
'  		0.0, 0.0, 1.0, 0.0,
'  		0.0, 0.0, 0.0, 1.0]
'  
	Field last  :Int
'  	Field state :Int[ 2 ]

	Field gbufferTex := New DataBuffer( 6 ) ' bgfx::TextureHandle

	Method OnRender:Int()

		bgfxGetCaps( m_caps )

		' Update frame timer
		Local now       :Int = Millisecs()
		Local frameTime :Int = now - last
		last = now

		Local deltaTime :Float = Float( frameTime ) * 0.001
		Local time      :Float = Float( now - m_timeOffset ) * 0.001

		If 2 > m_caps.GetLimitsMaxFBAttachments() Then

			' When multiple render targets (MRT) is not supported by GPU,
			' implement alternative code path that doesn't use MRT.
			Local blink :Bool = (Int( time * 3.0 ) & 1) = 1
			Local attr  :Int  = $04 ; If blink Then attr = $4f
			bgfxDbgTextPrintf( 0, 0, attr, " MRT not supported by GPU. " )

			' Set view 0 default viewport.
			bgfxSetViewRect( 0, 0, 0, m_width, m_height )

			' This dummy draw call is here to make sure that view 0 is cleared
			' if no other draw calls are submitted to view 0.
			bgfxTouch( 0 )

		Else

			If m_oldWidth <> m_width Or m_oldHeight <> m_height Or m_oldReset <> m_reset Or Not bgfxIsValid( m_gbuffer ) Then

				' Recreate variable size render targets when resolution changes.
				m_oldWidth  = m_width
				m_oldHeight = m_height
				m_oldReset  = m_reset

				If bgfxIsValid( m_gbuffer ) Then
					bgfxDestroyFrameBuffer( m_gbuffer )
				Endif

				Local tsFlags:Int[ 2 ]

				bgfxUtilsClear64Bit( tsFlags )
				bgfxUtilsSet64Bit( tsFlags, BGFX_TEXTURE_RT )
				bgfxUtilsSet64Bit( tsFlags, BGFX_SAMPLER_U_CLAMP )
				bgfxUtilsSet64Bit( tsFlags, BGFX_SAMPLER_V_CLAMP )

				For Local ii:Int = 0 Until TEX_CHAIN_LEN

					If bgfxIsValid( m_texChainFb[ ii ] ) Then
						bgfxDestroyFrameBuffer( m_texChainFb[ ii ] )
					Endif

					Local dim:Float = Float( 1 Shl ii )

					m_texChainFb[ ii ]  = bgfxCreateFrameBuffer( Int( m_width / dim ), Int( m_height / dim ), BGFX_TEXTURE_FORMAT_RGBA32F, tsFlags )
				Next


				gbufferTex.PokeShort( 0, bgfxCreateTexture2D( m_width, m_height, False, 1, BGFX_TEXTURE_FORMAT_RGBA32F, tsFlags ) )
				gbufferTex.PokeShort( 2, bgfxGetTexture( m_texChainFb[ 0 ] ) )
				gbufferTex.PokeShort( 4, bgfxCreateTexture2D( m_width, m_height, False, 1, BGFX_TEXTURE_FORMAT_D24S8, tsFlags ) )

				m_gbuffer = bgfxCreateFrameBufferFromHandles( gbufferTex.Length(), gbufferTex, True )
			Endif

			' Update camera.
			CameraUpdate( deltaTime )

			Local view:Float[ 16 ]
			CameraGetViewMtx( view )

			Local proj:Float[ 16 ]
			' Setup views
			' {
				bgfxSetViewRect( RENDER_PASS_GEOMETRY_ID, 0, 0, m_width, m_height )

				For Local ii:Int = 0 Until TEX_CHAIN_LEN -1
					Local dim:Float = Float( 1 Shl (ii + 1) )
					bgfxSetViewRect( RENDER_PASS_DOWNSAMPLE0_ID + ii, 0, 0, Int(m_width  / dim), Int(m_height / dim) )
				Next

				For Local ii:Int = 0 Until TEX_CHAIN_LEN -1
					Local dim:Float = Float( 1 Shl (TEX_CHAIN_LEN - ii - 2) )
					bgfxSetViewRect( RENDER_PASS_UPSAMPLE0_ID + ii, 0, 0, Int(m_width  / dim), Int(m_height / dim) )
				Next

				bxMtxProj( proj, 60.0, Float(m_width) / Float(m_height), 0.1, 100.0, m_caps.GetHomogeneousDepth() )
				bgfxSetViewFrameBuffer( RENDER_PASS_GEOMETRY_ID, m_gbuffer )
				bgfxSetViewTransform( RENDER_PASS_GEOMETRY_ID, view, proj )

				bgfxSetViewRect( RENDER_PASS_COMBINE_ID, 0, 0, m_width, m_height )

				bxMtxOrtho( proj, 0.0, 1.0, 1.0, 0.0, 0.0, 100.0, 0.0, m_caps.GetHomogeneousDepth() )

				For Local ii:Int = 0 Until TEX_CHAIN_LEN -1
					bgfxSetViewTransformProj( RENDER_PASS_DOWNSAMPLE0_ID + ii, proj )
					bgfxSetViewFrameBuffer( RENDER_PASS_DOWNSAMPLE0_ID + ii, m_texChainFb[ ii + 1 ] )
				Next

				For Local ii:Int = 0 Until TEX_CHAIN_LEN -1
					bgfxSetViewTransformProj( RENDER_PASS_UPSAMPLE0_ID + ii, proj )
					bgfxSetViewFrameBuffer( RENDER_PASS_UPSAMPLE0_ID + ii, m_texChainFb[ TEX_CHAIN_LEN - ii - 2 ] )
				Next

				bgfxSetViewTransformProj( RENDER_PASS_COMBINE_ID, proj )
			' }

			Const kNum       :Int = 9
			' Const kNumColors :Int = 5
			Local color      :Float[][] = [ ' [ 4 * kNumColors ] =
				' Palette: http:'www.colourlovers.com/palette/3647908/RGB_Ice_Cream
				[ 0.847 * 0.2, 0.365 * 0.2, 0.408 * 0.2, 1.0 ],
				[ 0.976 * 0.2, 0.827 * 0.2, 0.533 * 0.2, 1.0 ],
				[ 0.533 * 0.2, 0.867 * 0.2, 0.741 * 0.2, 1.0 ],
				[ 0.894 * 0.2, 0.620 * 0.2, 0.416 * 0.2, 1.0 ],
				[ 0.584 * 0.2, 0.788 * 0.2, 0.882 * 0.2, 1.0 ] ]

			' Render a whole bunch of colored cubes to the g-buffer.
			For Local xx:Int = 0 Until kNum

				bgfxSetUniform( u_color, color[ ( xx Mod color.Length() ) ] )

				Local mtx:Float[ 16 ]

				bxMtxIdentity( mtx )

				Local tt:Float = Float(xx) / Float(kNum) + 0.07 * time
				Local rr:Float = Sinr( 0.47 * time * TWOPI ) + 1.4

				mtx[ 12 ] = Sinr( tt * TWOPI ) * rr
				mtx[ 13 ] = Cosr( tt * TWOPI ) * rr
				mtx[ 14 ] = 0.2 * Float(xx) / Float(kNum)

				' Set transform for draw call.
				bgfxSetTransform( mtx )

				' Set vertex and index buffer.
				bgfxSetVertexBuffer( 0, m_vbh )
				bgfxSetIndexBuffer( m_ibh )

				' Set render states.
				Local state:Int[ 2 ]
				bgfxUtilsClear64Bit( state )
				bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_RGB )
				bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_A )
				bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_Z )
				bgfxUtilsSet64Bit( state, BGFX_STATE_DEPTH_TEST_LESS )
				bgfxUtilsSet64Bit( state, BGFX_STATE_MSAA )
				bgfxSetState( state )

				' Submit primitive for rendering to view 0.
				bgfxSubmit( RENDER_PASS_GEOMETRY_ID, m_geomProgram )
			Next

			' Now downsample.
			For Local ii:Int = 0 Until TEX_CHAIN_LEN -1

				Local dim       :Float = Float( 1 Shl (ii + 1) )
				Local pixelSize :Float[] = [
					1.0 / ( Float( m_width  ) / dim ),
					1.0 / ( Float( m_height ) / dim ),
					0.0,
					0.0 ]

				bgfxSetUniform( u_pixelSize, pixelSize )
				bgfxSetTexture( 0, s_tex, bgfxGetTexture( m_texChainFb[ ii ] ) )

				Local state:Int[ 2 ]
				bgfxUtilsClear64Bit( state )
				bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_RGB )
				bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_A )
				bgfxSetState( state )

				ScreenSpaceQuad( Float( m_width ), Float( m_height ), s_texelHalf, m_caps.GetOriginBottomLeft() )
				bgfxSubmit( RENDER_PASS_DOWNSAMPLE0_ID + ii, m_downsampleProgram )
			Next

			' Now upsample.
			For Local ii:Int = 0 Until TEX_CHAIN_LEN -1

				Local dim       :Float = Float(1 Shl (TEX_CHAIN_LEN - 2 - ii) )
				Local pixelSize :Float[] = [
					1.0 / ( Float( m_width  ) / dim ),
					1.0 / ( Float( m_height ) / dim ),
					0.0,
					0.0 ]
				Local intensity :Float[] = [ m_intensity, 0.0, 0.0, 0.0 ]

				bgfxSetUniform( u_pixelSize, pixelSize )
				bgfxSetUniform( u_intensity, intensity )

				' Combine color and light buffers.
				bgfxSetTexture( 0, s_tex, bgfxGetTexture( m_texChainFb[ TEX_CHAIN_LEN - 1 - ii ] ) )

				' As we upscale, we also sum with the previous mip level. We do this by alpha blending.
				Local state:Int[ 2 ]
				state[ 0 ] = $00000000
				state[ 1 ] = $0222200f
'  				bgfxUtilsClear64Bit( state )
'  				bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_RGB )
'  				bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_A )
'  				bgfxUtilsSet64Bit( state, BGFX_STATE_BLEND_ADD )
				bgfxSetState( state )

				ScreenSpaceQuad( Float( m_width ), Float( m_height ), s_texelHalf, m_caps.GetOriginBottomLeft() )
				bgfxSubmit( RENDER_PASS_UPSAMPLE0_ID + ii, m_upsampleProgram )
			Next

			' Do final pass, that combines the bloom with the g-buffer.
			bgfxSetTexture( 0, s_albedo, bgfxGetTexture( m_gbuffer, 0 ) )
			bgfxSetTexture( 1, s_light,  bgfxGetTexture( m_texChainFb[ 0 ] ) )

			Local state:Int[ 2 ]
			bgfxUtilsClear64Bit( state )
			bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_RGB )
			bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_A )
			bgfxSetState( state )

			ScreenSpaceQuad( Float( m_width ), Float( m_height ), s_texelHalf, m_caps.GetOriginBottomLeft() )
			bgfxSubmit( RENDER_PASS_COMBINE_ID, m_combineProgram )
		Endif

		DrawText( "Settings", 8, 14 * 1 )
		DrawText( "Intensity: " + m_intensity, 8, 14 * 2 )

		' Advance to next frame. Rendering thread will be kicked to
		' process submitted rendering primitives.
		'
		' bgfxFrame is done in the while loop of method void BBGlfwGame::Run() 
		' in file targets\glfw3_bgfx\modules\native\glfwgame.cpp
		' it is done after method RenderGame(), where glfwSwapBuffers used to be
		'
		' bgfxFrame()

		Return 0
	End

End

Function Main:Int()
	Print "Title: 38-bloom"
	Print "Description: Bloom."
	New BloomExample()
	Return 0
End


