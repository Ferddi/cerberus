
#MOJO_AUTO_SUSPEND_ENABLED = False

#GLFW_WINDOW_WIDTH          = 1280
#GLFW_WINDOW_HEIGHT         = 720

' using DrawText to draw some bgfx debug text
Import mojo1bgfx

' remove DrawText codes and use these minimal imports
'Import mojo.app
'Import bgfx
'
'Import mojo.input

Import camera

Function BoolToString:String( value:Bool )
	If value Then Return "True"
	Return "False"
End

Global s_shapeNames:String[] = [
	"Point",
	"Sphere",
	"Box",
	"Donut" ]

Class ParamsData

	Const timeStep          :Int =  0 ' :Float
	Const dispatchSize      :Int =  4 ' :Int
	Const gravity           :Int =  8 ' :Float
	Const damping           :Int = 12 ' :Float

	Const particleIntensity :Int = 16 ' :Float
	Const particleSize      :Int = 20 ' :Float
	Const baseSeed          :Int = 24 ' :Int
	Const particlePower     :Int = 28 ' :Float

	Const initialSpeed      :Int = 32 ' :Float
	Const initialShape      :Int = 36 ' :Int
	Const maxAccel          :Int = 40 ' :Float
	Const unused            :Int = 44

	Const totalSize         :Int = 48
End

Function InitializeParams:Void( _mode:Int, _params:DataBuffer )

	Select _mode

	Case 0
		_params.PokeFloat( ParamsData.timeStep,          0.0067 )
		_params.PokeInt(   ParamsData.dispatchSize,      32 )
		_params.PokeFloat( ParamsData.gravity,           0.069 )
		_params.PokeFloat( ParamsData.damping,           0.0 )
		_params.PokeFloat( ParamsData.particleIntensity, 0.35 )
		_params.PokeFloat( ParamsData.particleSize,      0.925 )
		_params.PokeInt(   ParamsData.baseSeed,          0 )
		_params.PokeFloat( ParamsData.particlePower,     5.0 )
		_params.PokeFloat( ParamsData.initialSpeed,      122.6 )
		_params.PokeInt(   ParamsData.initialShape,      0 )
		_params.PokeFloat( ParamsData.maxAccel,          30.0 )

	Case 1
		_params.PokeFloat( ParamsData.timeStep,          0.0157 )
		_params.PokeInt(   ParamsData.dispatchSize,      32 )
		_params.PokeFloat( ParamsData.gravity,           0.109 )
		_params.PokeFloat( ParamsData.damping,           0.25 )
		_params.PokeFloat( ParamsData.particleIntensity, 0.64 )
		_params.PokeFloat( ParamsData.particleSize,      0.279 )
		_params.PokeInt(   ParamsData.baseSeed,          57 )
		_params.PokeFloat( ParamsData.particlePower,     3.5 )
		_params.PokeFloat( ParamsData.initialSpeed,      3.2 )
		_params.PokeInt(   ParamsData.initialShape,      1 )
		_params.PokeFloat( ParamsData.maxAccel,          100.0 )

	Case 2
		_params.PokeFloat( ParamsData.timeStep,          0.02 )
		_params.PokeInt(   ParamsData.dispatchSize,      32 )
		_params.PokeFloat( ParamsData.gravity,           0.24 )
		_params.PokeFloat( ParamsData.damping,           0.12 )
		_params.PokeFloat( ParamsData.particleIntensity, 1.0 )
		_params.PokeFloat( ParamsData.particleSize,      1.0 )
		_params.PokeInt(   ParamsData.baseSeed,          23 )
		_params.PokeFloat( ParamsData.particlePower,     4.0 )
		_params.PokeFloat( ParamsData.initialSpeed,      31.1 )
		_params.PokeInt(   ParamsData.initialShape,      2 )
		_params.PokeFloat( ParamsData.maxAccel,          39.29 )

	Case 3
		_params.PokeFloat( ParamsData.timeStep,          0.0118 )
		_params.PokeInt(   ParamsData.dispatchSize,      32 )
		_params.PokeFloat( ParamsData.gravity,           0.141 )
		_params.PokeFloat( ParamsData.damping,           1.0 )
		_params.PokeFloat( ParamsData.particleIntensity, 0.64 )
		_params.PokeFloat( ParamsData.particleSize,      0.28 )
		_params.PokeInt(   ParamsData.baseSeed,          60 )
		_params.PokeFloat( ParamsData.particlePower,     1.97 )
		_params.PokeFloat( ParamsData.initialSpeed,      69.7 )
		_params.PokeInt(   ParamsData.initialShape,      3 )
		_params.PokeFloat( ParamsData.maxAccel,          3.21 )
	End
End

Global s_quadVertices:Float[] = [
	 1.0,  1.0,
	-1.0,  1.0,
	-1.0, -1.0,
	 1.0, -1.0 ]

Global s_quadIndices:Int[] = [ 0, 1, 2, 2, 3, 0 ]

Function FloatToDataBuffer:DataBuffer( _vertices:Float[] )

	Local bufferAddress :Int = 0
	Local verticesCount :Int = _vertices.Length()

	' the size of each vertices is float (32 bit), which is 4 bytes:
	Local verticesBuffer := New DataBuffer( verticesCount * 4 )

	For Local ii:Int = 0 Until verticesCount
		verticesBuffer.PokeFloat( bufferAddress, _vertices[ ii ] ) ; bufferAddress += 4
	Next

	Return verticesBuffer
End

Function Index16ToDataBuffer:DataBuffer( _indices:Int[] )

	Local bufferAddress :Int = 0
	Local indicesCount  :Int = _indices.Length()

	' the size of each index is 16 bit, which is 2 bytes:
	Local indicesBuffer := New DataBuffer( indicesCount * 2 )

	For Local ii:Int = 0 Until indicesCount
		indicesBuffer.PokeShort( bufferAddress, _indices[ ii ] ) ; bufferAddress += 2
	Next

	Return indicesBuffer
End

Const kThreadGroupUpdateSize :Int = 512
const kMaxParticleCount      :Int = 32 * 1024

Class NbodyExample Extends App

	Field bgfxCaps                 := New BgfxCaps()

'  	Field m_width                  :Int ' use DeviceWidth directly
'  	Field m_height                 :Int ' use DeviceHeight directly
'  	Field m_debug                  :Int = BGFX_DEBUG_NONE
	Field m_debug                  :Int ' = BGFX_DEBUG_TEXT
	Field m_reset                  :Int ' = BGFX_RESET_VSYNC

	Field m_useIndirect            :Bool
	Field m_computeSupported       :Bool
	Field m_indirectSupported      :Bool

	Field m_paramsData             := New DataBuffer( ParamsData.totalSize )

	Field m_vbh                    :Int
	Field m_ibh                    :Int

	Field m_particleProgram        :Int
	Field m_indirectProgram        :Int
	Field m_initInstancesProgram   :Int
	Field m_updateInstancesProgram :Int

	Field m_indirectBuffer         :Int

	Field m_currPositionBuffer0    :Int
	Field m_currPositionBuffer1    :Int
	Field m_prevPositionBuffer0    :Int
	Field m_prevPositionBuffer1    :Int

	Field u_params                 :Int
	Field m_timeOffset             :Int

	Method OnCreate:Int()

		SetUpdateRate( 60 )

'  		m_width  = DeviceWidth()
'  		m_height = DeviceHeight()
		m_debug  = BGFX_DEBUG_TEXT
		m_reset  = 0 | BGFX_RESET_VSYNC ' <-- not used because init is in target

'  		bgfx::Init init;
'  		init.type     = args.m_type;
'  		init.vendorId = args.m_pciId;
'  		init.resolution.width  = m_width;
'  		init.resolution.height = m_height;
'  		init.resolution.reset  = m_reset;
'  		bgfx::init(init);

		' Enable debug text.
		bgfxSetDebug( m_debug )

		' Set view 0 clear state.
		bgfxSetViewClear( 0, BGFX_CLEAR_COLOR | BGFX_CLEAR_DEPTH, $303030ff, 1.0, 0 )

		bgfxGetCaps( bgfxCaps )
		bgfxCaps.GetSupported( supported )

		m_computeSupported  = bgfxCapsIsComputeSupported( supported )
		m_indirectSupported = bgfxCapsIsDrawIndirectSupported( supported )

		If m_computeSupported Then

			Local quadVertexDecl := New BgfxVertexDecl()
			bgfxVertexDeclBegin( quadVertexDecl )
			bgfxVertexDeclAdd( quadVertexDecl, BGFX_ATTRIB_POSITION, 2, BGFX_ATTRIB_TYPE_FLOAT )
			bgfxVertexDeclEnd( quadVertexDecl )

			' Create static vertex buffer.
			m_vbh = bgfxCreateVertexBuffer(
				' Static data can be passed with bgfxMakeRef
				bgfxUtilsMakeRef( FloatToDataBuffer( s_quadVertices ) ),
				quadVertexDecl )

			' Create static index buffer.
			m_ibh = bgfxCreateIndexBuffer(
				' Static data can be passed with bgfxMakeRef
				bgfxUtilsMakeRef( Index16ToDataBuffer( s_quadIndices ) ) )

			' Create particle program from shaders.
			m_particleProgram = bgfxUtilsLoadProgram( "vs_particle", "fs_particle" )

			' Setup compute buffers
			Local computeVertexDecl := New BgfxVertexDecl()
			bgfxVertexDeclBegin( computeVertexDecl )
			bgfxVertexDeclAdd( computeVertexDecl, BGFX_ATTRIB_TEXCOORD0, 4, BGFX_ATTRIB_TYPE_FLOAT )
			bgfxVertexDeclEnd( computeVertexDecl )

			m_currPositionBuffer0 = bgfxCreateDynamicVertexBuffer( 1 Shl 15, computeVertexDecl, BGFX_BUFFER_COMPUTE_READ_WRITE )
			m_currPositionBuffer1 = bgfxCreateDynamicVertexBuffer( 1 Shl 15, computeVertexDecl, BGFX_BUFFER_COMPUTE_READ_WRITE )
			m_prevPositionBuffer0 = bgfxCreateDynamicVertexBuffer( 1 Shl 15, computeVertexDecl, BGFX_BUFFER_COMPUTE_READ_WRITE )
			m_prevPositionBuffer1 = bgfxCreateDynamicVertexBuffer( 1 Shl 15, computeVertexDecl, BGFX_BUFFER_COMPUTE_READ_WRITE )

			u_params = bgfxCreateUniform( "u_params", BGFX_UNIFORM_TYPE_VEC4, 3 )

			m_initInstancesProgram   = bgfxCreateComputeProgram( bgfxUtilsLoadShader( "cs_init_instances" ), True )
			m_updateInstancesProgram = bgfxCreateComputeProgram( bgfxUtilsLoadShader( "cs_update_instances" ), True )

			m_indirectProgram = BGFX_INVALID_HANDLE
			m_indirectBuffer  = BGFX_INVALID_HANDLE

			If m_indirectSupported Then
				m_indirectProgram = bgfxCreateProgram( bgfxUtilsLoadShader( "cs_indirect" ), True )
				m_indirectBuffer  = bgfxCreateIndirectBuffer( 2 )
			Endif

			InitializeParams( 0, m_paramsData )

			bgfxSetUniform( u_params, m_paramsData, 3 )
			bgfxSetComputeDynamicVertexBuffer( 0, m_prevPositionBuffer0, BGFX_ACCESS_WRITE )
			bgfxSetComputeDynamicVertexBuffer( 1, m_currPositionBuffer0, BGFX_ACCESS_WRITE )
			bgfxDispatch( 0, m_initInstancesProgram, kMaxParticleCount / kThreadGroupUpdateSize, 1, 1 )

			Local initialPos:Float[] = [ 0.0, 0.0, -45.0 ]
			CameraCreate()
			CameraSetPosition( initialPos )
			CameraSetVerticalAngle( 0.0 )

			m_useIndirect = False

			m_timeOffset = Millisecs()

			shape = m_paramsData.PeekInt( ParamsData.initialShape )
		Endif
	End

	Method OnUpdate:Int()

		If KeyHit( KEY_SPACE ) Then

			shape += 1
			If shape >= 4 Then shape = 0

			' Modify parameters and reset if shape is changed
			InitializeParams( shape, m_paramsData )
			reset = True
		Endif

		If KeyHit( KEY_R ) Then
			reset = True
		Endif

		Return 0
	End

	'
	' @Bug: Crash when trying to destroy bgfx
	'
'  	Method OnClose:Int()
'  
'  		' Cleanup.
'  		CameraDestroy()
'  
'  		If m_computeSupported Then
'  
'  			If m_indirectSupported Then
'  				bgfxDestroyProgram( m_indirectProgram )
'  				bgfxDestroyIndirectBuffer( m_indirectBuffer )
'  			Endif
'  
'  			bgfxDestroyUniform( u_params )
'  
'  			bgfxDestroyDynamicVertexBuffer( m_currPositionBuffer0 )
'  			bgfxDestroyDynamicVertexBuffer( m_currPositionBuffer1 )
'  			bgfxDestroyDynamicVertexBuffer( m_prevPositionBuffer0 )
'  			bgfxDestroyDynamicVertexBuffer( m_prevPositionBuffer1 )
'  
'  			bgfxDestroyProgram( m_updateInstancesProgram )
'  			bgfxDestroyProgram( m_initInstancesProgram )
'  
'  			bgfxDestroyIndexBuffer( m_ibh )
'  			bgfxDestroyVertexBuffer( m_vbh )
'  
'  			bgfxDestroyProgram( m_particleProgram )
'  		Endif
'  
'  		' Shutdown bgfx.
'  		bgfxShutdown()
'  
'  		Return 0
'  	End

	Field last      :Int
	Field state     :Int[ 2 ]

	Field reset     :Bool  = False
	Field shape     :Int

	Field supported :Int[2]

	Method OnRender:Int()

		Local m_width   :Int = DeviceWidth()
		Local m_height  :Int = DeviceHeight()

		Local now       :Int = Millisecs()
		Local frameTime :Int = now - last
		last = now

		Local deltaTime :Float = Float( frameTime ) * 0.001

		bgfxGetCaps( bgfxCaps )

		' Set view 0 default viewport.
		bgfxSetViewRect(0, 0, 0, Int( m_width ), Int( m_height ) )

		If m_computeSupported Then

			If reset Then
				bgfxSetComputeDynamicVertexBuffer( 0, m_prevPositionBuffer0, BGFX_ACCESS_WRITE )
				bgfxSetComputeDynamicVertexBuffer( 1, m_currPositionBuffer0, BGFX_ACCESS_WRITE )
				bgfxSetUniform( u_params, m_paramsData, 3 )
				bgfxDispatch( 0, m_initInstancesProgram, kMaxParticleCount / kThreadGroupUpdateSize, 1, 1 )
			Endif

			If m_useIndirect Then
				bgfxSetUniform( u_params, m_paramsData, 3 )
				bgfxSetComputeDynamicVertexBuffer( 0, m_indirectBuffer, BGFX_ACCESS_WRITE )
				bgfxDispatch( 0, m_indirectProgram )
			Endif

			bgfxSetComputeDynamicVertexBuffer( 0, m_prevPositionBuffer0, BGFX_ACCESS_READ )
			bgfxSetComputeDynamicVertexBuffer( 1, m_currPositionBuffer0, BGFX_ACCESS_READ )
			bgfxSetComputeDynamicVertexBuffer( 2, m_prevPositionBuffer1, BGFX_ACCESS_WRITE )
			bgfxSetComputeDynamicVertexBuffer( 3, m_currPositionBuffer1, BGFX_ACCESS_WRITE )
			bgfxSetUniform( u_params, m_paramsData, 3 )

			If m_useIndirect Then
				bgfxDispatch( 0, m_updateInstancesProgram, m_indirectBuffer, 1 )
			Else
				bgfxDispatch( 0, m_updateInstancesProgram, Int( m_paramsData.PeekInt( ParamsData.dispatchSize ) ), 1, 1 )
			Endif

			Local tempHandle:Int

			' bxXchg( m_currPositionBuffer0, m_currPositionBuffer1 )
			tempHandle = m_currPositionBuffer0
			m_currPositionBuffer0 = m_currPositionBuffer1
			m_currPositionBuffer1 = tempHandle

			' bxXchg( m_prevPositionBuffer0, m_prevPositionBuffer1 )
			tempHandle = m_prevPositionBuffer0
			m_prevPositionBuffer0 = m_prevPositionBuffer1
			m_prevPositionBuffer1 = tempHandle

			' Update camera.
			CameraUpdate( deltaTime )

			Local view:Float[ 16 ]
			CameraGetViewMtx( view )

			' Set view and projection matrix for view 0.
			' {
				Local proj:Float[ 16 ]
				bxMtxProj( proj, 90.0, Float( m_width ) / Float( m_height ), 0.1, 10000.0, bgfxCaps.GetHomogeneousDepth() ) 
				bgfxSetViewTransform( 0, view, proj )

				' Set view 0 default viewport.
				bgfxSetViewRect( 0, 0, 0, Int( m_width ), Int( m_height ) )
			' }

			' Set vertex and index buffer.
			bgfxSetVertexBuffer( 0, m_vbh )
			bgfxSetIndexBuffer( m_ibh )
			bgfxSetInstanceDataFromDynamicVertexBuffer( m_currPositionBuffer0, 0, m_paramsData.PeekInt( ParamsData.dispatchSize ) * kThreadGroupUpdateSize )

			' Set render states.
'  			bgfxUtilsClear64Bit( state )
'  			bgfxUtilsSet64Bit( state, BGFX_STATE_WRITE_RGB )
'  			bgfxUtilsSet64Bit( state, BGFX_STATE_BLEND_ADD )
'  			bgfxUtilsSet64Bit( state, BGFX_STATE_DEPTH_TEST_ALWAYS )
			state[ 0 ] = $00000000
			state[ 1 ] = $02222087
			bgfxSetState( state )

			' Submit primitive for rendering to view 0.
			If m_useIndirect Then
				bgfxSubmitIndirect( 0, m_particleProgram, m_indirectBuffer, 0 )
			Else
				bgfxSubmit( 0, m_particleProgram )
			Endif

			DrawText( "Settings", 8, 14 * 1 )

			DrawText( "Initial shape: " + s_shapeNames[ shape ], 8, 14 * 3 )
			DrawText( "Random seed: " + m_paramsData.PeekInt( ParamsData.baseSeed ), 8, 14 * 4 )
			DrawText( "[R]eset", 8, 14 * 5 )

			DrawText( "Particle count (x512): " + m_paramsData.PeekInt( ParamsData.dispatchSize ), 8, 14 * 7 )
			DrawText( "Gravity: " + m_paramsData.PeekFloat( ParamsData.gravity ), 8, 14 * 8 )
			DrawText( "Damping: " + m_paramsData.PeekFloat( ParamsData.damping ), 8, 14 * 9 )
			DrawText( "Max acceleration: " + m_paramsData.PeekFloat( ParamsData.maxAccel ), 8, 14 * 10 )
			DrawText( "Time step: " + m_paramsData.PeekFloat( ParamsData.timeStep ), 8, 14 * 11 )

			DrawText( "Particle intensity: " + m_paramsData.PeekFloat( ParamsData.particleIntensity ), 8, 14 * 13 )
			DrawText( "Particle size: " + m_paramsData.PeekFloat( ParamsData.particleSize ), 8, 14 * 14 )
			DrawText( "Particle power: " + m_paramsData.PeekFloat( ParamsData.particlePower ), 8, 14 * 15 )

			DrawText( "Use draw/dispatch indirect: " + BoolToString( m_useIndirect ), 8, 14 * 17 )

		Else ' If Not m_computeSupported Then

			DrawText( "Compute is not supported.", 8, 14 * 1)
		Endif

		' Advance to next frame. Rendering thread will be kicked to
		' process submitted rendering primitives.
		'
		' bgfxFrame is done in the while loop of method void BBGlfwGame::Run() 
		' in file targets\glfw3_bgfx\modules\native\glfwgame.cpp
		' it is done after method RenderGame(), where glfwSwapBuffers used to be
		' bgfxFrame() 

		Return 0
	End

End

Function Main:Int()
	Print "Title: 24-nbody"
	Print "Description: N-body simulation with compute shaders using buffers."
	New NbodyExample()
	Return 0
End


