
#GLFW_WINDOW_WIDTH  = 1280
#GLFW_WINDOW_HEIGHT = 720

' using DrawText to draw some bgfx debug text
'  Import mojo1bgfx

' remove DrawText codes and use these minimal imports
Import mojo.app
Import bgfx

'  Class PosColorTexCoord0Vertex
'  
'  '  	Field m_x:Float
'  '  	Field m_y:Float
'  '  	Field m_z:Float
'  '  
'  '  	Field m_abgr:Int
'  '  
'  '  	Field m_u:Float
'  '  	Field m_v:Float
'  '  
'  '  	Method New(m_x:Float, m_y:Float, m_z:Float, m_abgr:Int, m_u:Float, m_v:Float)
'  '  
'  '  		Self.m_x = m_x
'  '  		Self.m_y = m_y
'  '  		Self.m_z = m_z
'  '  
'  '  		Self.m_abgr = m_abgr
'  '  
'  '  		Self.m_u = m_u
'  '  		Self.m_v = m_v
'  '  	End
'  
'  	Global ms_decl:BgfxVertexDecl = New BgfxVertexDecl()
'  
'  	Function Init:Void()
'  		bgfxVertexDeclBegin( ms_decl )
'  		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_POSITION, 3, BGFX_ATTRIB_TYPE_FLOAT )
'  		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_COLOR0, 4, BGFX_ATTRIB_TYPE_UINT8, True )
'  		bgfxVertexDeclAdd( ms_decl, BGFX_ATTRIB_TEXCOORD0, 2, BGFX_ATTRIB_TYPE_FLOAT )
'  		bgfxVertexDeclEnd( ms_decl )
'  	End
'  End

'-------------------------------------------------------------------------------
' move these to bgfx utils
'-------------------------------------------------------------------------------

Class MeshExample Extends App

	Field m_debug   :Int = BGFX_DEBUG_NONE
'  	Field m_debug   :Int = BGFX_DEBUG_TEXT

	Field m_mesh    :BgfxUtilsMesh
	Field m_program :BgfxProgramHandle
	Field u_time    := New BgfxUniformHandle()

	Method OnCreate:Int()

		SetUpdateRate(60)

		' Enable debug text.
		bgfxSetDebug(m_debug)

		' Set view 0 clear state.
		bgfxSetViewClear(0, BGFX_CLEAR_COLOR|BGFX_CLEAR_DEPTH, $303030ff, 1.0, 0)

		bgfxCreateUniform(u_time, "u_time", BGFX_UNIFORM_TYPE_VEC4)

		' Create program from shaders.
		m_program = bgfxUtilsLoadProgram("vs_mesh", "fs_mesh")

		m_mesh = bgfxUtilsMeshLoad("meshes/bunny.bin")

		Return 0
	End

	Method OnUpdate:Int()
		Return 0
	End

	Field bgfxCaps := New BgfxCaps()

	Field at   :Float[] = [ 0.0, 1.0,  0.0 ]
	Field eye  :Float[] = [ 0.0, 1.0, -2.5 ]

	Field time :Float[4]

	Field view :Float[16]
	Field proj :Float[16]
	Field mtx  :Float[16]

	Method OnRender:Int()

		Local m_width  :Int = DeviceWidth()
		Local m_height :Int = DeviceHeight()

		' Set view 0 default viewport.
		bgfxSetViewRect(0, 0, 0, m_width, m_height)

		' This dummy draw call is here to make sure that view 0 is cleared
		' if no other draw calls are submitted to view 0.
		bgfxTouch(0)

		time[0] = Millisecs() * 0.001
		bgfxSetUniform(u_time, time)

		' Set view and projection matrix for view 0.
		'{
			bxMtxLookAt(view, eye, at)

			bgfxGetCaps(bgfxCaps)
			bxMtxProj(proj, 60.0, Float(m_width) / Float(m_height), 0.1, 100.0, bgfxCaps.GetHomogeneousDepth())
			bgfxSetViewTransform(0, view, proj)

			' Set view 0 default viewport.
			bgfxSetViewRect(0, 0, 0, m_width, m_height)
		'}

		bxMtxRotateXY(mtx, 0.0, time[0] * 0.37)
		Print "time[0]=" + time[0]

		bgfxUtilsMeshSubmit(m_mesh, 0, m_program, mtx)

		' Advance to next frame. Rendering thread will be kicked to
		' process submitted rendering primitives.
		'
		' bgfxFrame is done in the while loop of method void BBGlfwGame::Run() 
		' in file targets\glfw3_bgfx\modules\native\glfwgame.cpp
		' it is done after method RenderGame(), where glfwSwapBuffers used to be
		'
		' bgfxFrame() 

		Return 0
	End

End

Function Main:Int()
	New MeshExample()
	Return 0
End
