
#MOJO_AUTO_SUSPEND_ENABLED = False

#GLFW_WINDOW_WIDTH          = 1280
#GLFW_WINDOW_HEIGHT         = 720

' using DrawText to draw some bgfx debug text
Import mojo1bgfx

' remove DrawText codes and use these minimal imports
'Import mojo.app
'Import bgfx
'
'Import mojo.input

Import camera
Import debugdraw

Global s_bunnyVertices:DdVertex[] = [
	New DdVertex(   25.0883,  -44.2788,   31.0055 ),
	New DdVertex(  0.945623,   53.5504,  -24.6146 ),
	New DdVertex(  -0.94455,  -14.3443,  -16.8223 ),
	New DdVertex(  -20.1103,  -48.6664,   12.6763 ),
	New DdVertex(  -1.60652,  -26.3165,  -24.5424 ),
	New DdVertex(  -30.6284,  -53.6299,   14.7666 ),
	New DdVertex(   1.69145,  -43.8075,  -15.2065 ),
	New DdVertex(  -20.5139,   21.0521,  -5.40868 ),
	New DdVertex(  -13.9518,   53.6299,  -39.1193 ),
	New DdVertex(  -21.7912,   48.7801,  -42.0995 ),
	New DdVertex(  -26.8408,   23.6537,  -17.7324 ),
	New DdVertex(  -23.1196,   33.9692,   4.91483 ),
	New DdVertex(  -12.3236,  -41.6303,   31.8324 ),
	New DdVertex(   27.6427,  -5.05034,  -11.3201 ),
	New DdVertex(   32.2565,   1.30521,   30.2671 ),
	New DdVertex(   47.2723,  -27.0974,   11.1774 ),
	New DdVertex(    33.598,   10.5888,   7.95916 ),
	New DdVertex(  -13.2898,   12.6234,   5.55953 ),
	New DdVertex(  -32.7364,   19.0648,  -10.5736 ),
	New DdVertex(  -32.7536,   31.4158,  -1.40712 ),
	New DdVertex(  -25.3672,   30.2874,  -12.4682 ),
	New DdVertex(    32.921,  -36.8408,  -12.0254 ),
	New DdVertex(  -37.7251,  -33.8989,  0.378443 ),
	New DdVertex(  -35.6341, -0.246891,  -9.25165 ),
	New DdVertex(  -16.7041,  -50.0254,  -15.6177 ),
	New DdVertex(   24.6604,  -53.5319,  -11.1059 ),
	New DdVertex(  -7.77574,  -53.5719,  -16.6655 ),
	New DdVertex(   20.6241,   13.3489,  0.376349 ),
	New DdVertex(  -44.2889,   29.5222,   18.7918 ),
	New DdVertex(   18.5805,   16.3651,   12.6351 ),
	New DdVertex(  -23.7853,   31.7598,  -6.54093 ),
	New DdVertex(   24.7518,  -53.5075,   2.14984 ),
	New DdVertex(  -45.7912,  -17.6301,   21.1198 ),
	New DdVertex(   51.8403,  -33.1847,   24.3337 ),
	New DdVertex(  -47.5343,  -4.32792,   4.06232 ),
	New DdVertex(  -50.6832,   -12.442,   11.0994 ),
	New DdVertex(  -49.5132,   19.2782,   3.17559 ),
	New DdVertex(  -39.4881,   29.0208,  -6.70431 ),
	New DdVertex(  -52.7286,   1.23232,   9.74872 ),
	New DdVertex(    26.505,  -16.1297,  -17.0487 ),
	New DdVertex(   -25.367,   20.0473,  -8.44282 ),
	New DdVertex(  -24.5797,  -10.3143,  -18.3154 ),
	New DdVertex(  -28.6707,   6.12074,   27.8025 ),
	New DdVertex(  -16.9868,   22.6819,   1.37408 ),
	New DdVertex(  -37.2678,   23.9443,   -9.4945 ),
	New DdVertex(  -24.8562,   21.3763,   18.8847 ),
	New DdVertex(  -47.1879,    3.8542,  -4.74621 ),
	New DdVertex(   38.0706,  -7.33673,   -7.6099 ),
	New DdVertex(  -34.8833,  -3.57074,   26.4838 ),
	New DdVertex(   12.3797,   5.46782,   32.9762 ),
	New DdVertex(  -31.5974,   -22.956,   30.5827 ),
	New DdVertex(  -6.80953,    48.055,  -18.5116 ),
	New DdVertex(    6.3474,  -15.1622,  -24.4726 ),
	New DdVertex(  -25.5733,   25.2452,  -34.4736 ),
	New DdVertex(  -23.8955,   31.8323,  -40.8696 ),
	New DdVertex(  -11.8622,   38.2304,  -43.3125 ),
	New DdVertex(  -20.4918,   41.2409,  -3.11271 ),
	New DdVertex(   24.9806,  -8.53455,   37.2862 ),
	New DdVertex(  -52.8935,    5.3376,    28.246 ),
	New DdVertex(    34.106,  -41.7941,    30.962 ),
	New DdVertex(  -1.26914,   35.6664,  -18.7177 ),
	New DdVertex(  -0.13048,   44.7288,  -28.7163 ),
	New DdVertex(   2.47929,  0.678165,  -14.6892 ),
	New DdVertex(  -31.8649,  -14.2299,   32.2998 ),
	New DdVertex(   -19.774,   30.8258,   5.77293 ),
	New DdVertex(   49.8059,   -37.125,   4.97284 ),
	New DdVertex(  -28.0581,   -26.439,  -14.8316 ),
	New DdVertex(  -9.12066,  -27.3987,  -12.8592 ),
	New DdVertex(  -13.8752,  -29.9821,   32.5962 ),
	New DdVertex(   -6.6222,  -10.9884,   33.5007 ),
	New DdVertex(  -21.2664,  -53.6089,  -3.49195 ),
	New DdVertex( -0.628672,   52.8093,  -9.88088 ),
	New DdVertex(   8.02417,   51.8956,  -21.5834 ),
	New DdVertex(  -44.6547,   11.9973,   34.7897 ),
	New DdVertex(  -7.55466,   37.9035, -0.574101 ),
	New DdVertex(   52.8252,  -27.1986,   11.6429 ),
	New DdVertex( -0.934591,   9.81861,  0.512566 ),
	New DdVertex(  -3.01043,   5.70605,   22.0954 ),
	New DdVertex(  -34.6337,   44.5964,  -31.1713 ),
	New DdVertex(  -26.9017,   35.1991,  -32.4307 ),
	New DdVertex(   15.9884,  -8.92223,  -14.7411 ),
	New DdVertex(  -22.8337,   -43.458,   26.7274 ),
	New DdVertex(  -31.9864,  -47.0243,   9.36972 ),
	New DdVertex(  -36.9436,   24.1866,   29.2521 ),
	New DdVertex(  -26.5411,   29.6549,   21.2867 ),
	New DdVertex(   33.7644,  -24.1886,  -13.8513 ),
	New DdVertex(  -2.44749,  -17.0148,   41.6617 ),
	New DdVertex(   -38.364,  -13.9823,  -12.5705 ),
	New DdVertex(  -10.2972,  -51.6584,    38.935 ),
	New DdVertex(   1.28109,  -43.4943,   36.6288 ),
	New DdVertex(  -19.7784,  -44.0413,  -4.23994 ),
	New DdVertex(   37.0944,  -53.5479,   27.6467 ),
	New DdVertex(   24.9642,  -37.1722,   35.7038 ),
	New DdVertex(   37.5851,   5.64874,   21.6702 ),
	New DdVertex(  -17.4738,  -53.5734,   30.0664 ),
	New DdVertex(  -8.93088,   45.3429,  -34.4441 ),
	New DdVertex(  -17.7111,   -6.5723,   29.5162 ),
	New DdVertex(   44.0059,  -17.4408,  -5.08686 ),
	New DdVertex(  -46.2534,  -22.6115,  0.702059 ),
	New DdVertex(   43.9321,  -33.8575,   4.31819 ),
	New DdVertex(   41.6762,  -7.37115,   27.6798 ),
	New DdVertex(   8.20276,  -42.0948,  -18.0893 ),
	New DdVertex(   26.2678,  -44.6777,  -10.6835 ),
	New DdVertex(    17.709,   13.1542,   25.1769 ),
	New DdVertex(  -35.9897,   3.92007,   35.8198 ),
	New DdVertex(  -23.9323,  -37.3142,  -2.39396 ),
	New DdVertex(   5.19169,   46.8851,  -28.7587 ),
	New DdVertex(  -37.3072,  -35.0484,   16.9719 ),
	New DdVertex(   45.0639,  -28.5255,   22.3465 ),
	New DdVertex(  -34.4175,   35.5861,  -21.7562 ),
	New DdVertex(   9.32684,  -12.6655,    42.189 ),
	New DdVertex(   1.00938,  -31.7694,   43.1914 ),
	New DdVertex(  -45.4666,  -3.71104,   19.2248 ),
	New DdVertex(  -28.7999,  -50.8481,   31.5232 ),
	New DdVertex(   35.2212,  -45.9047,  0.199736 ),
	New DdVertex(      40.3,  -53.5889,   7.47622 ),
	New DdVertex(   29.0515,    5.1074,   -10.002 ),
	New DdVertex(   13.4336,   4.84341,  -9.72327 ),
	New DdVertex(   11.0617,   -26.245,  -24.9471 ),
	New DdVertex(  -35.6056,  -51.2531,  0.436527 ),
	New DdVertex(  -10.6863,   34.7374,  -36.7452 ),
	New DdVertex(  -51.7652,   27.4957,   7.79363 ),
	New DdVertex(  -50.1898,    18.379,   26.3763 ),
	New DdVertex(  -49.6836,  -1.32722,   26.2828 ),
	New DdVertex(   19.0363,  -16.9114,   41.8511 ),
	New DdVertex(   32.7141,   -21.501,   36.0025 ),
	New DdVertex(   12.5418,  -28.4244,   43.3125 ),
	New DdVertex(  -19.5634,   42.6328,  -27.0687 ),
	New DdVertex(  -16.1942,   6.55011,   19.4066 ),
	New DdVertex(   46.9886,  -18.8482,   22.1332 ),
	New DdVertex(   45.9697,  -3.76781,   4.10111 ),
	New DdVertex(  -28.2912,   51.3277,  -35.1815 ),
	New DdVertex(  -40.2796,  -27.7518,   22.8684 ),
	New DdVertex(  -22.7984,  -38.9977,    22.158 ),
	New DdVertex(   54.0614,  -35.6096,    12.694 ),
	New DdVertex(   44.2064,  -53.6029,   18.8679 ),
	New DdVertex(    19.789,   -29.517,  -19.6094 ),
	New DdVertex(  -34.3769,   34.8566,   9.92517 ),
	New DdVertex(  -23.7518,  -45.0319,   8.71282 ),
	New DdVertex(  -12.7978,   3.55087,  -13.7108 ),
	New DdVertex(  -54.0614,   8.83831,   8.91353 ),
	New DdVertex(   16.2986,  -53.5717,    34.065 ),
	New DdVertex(  -36.6243,  -53.5079,   24.6495 ),
	New DdVertex(   16.5794,  -48.5747,   35.5681 ),
	New DdVertex(  -32.3263,   41.4526,  -18.7388 ),
	New DdVertex(  -18.8488,   9.62627,  -8.81052 ),
	New DdVertex(   5.35849,   36.3616,  -12.9346 ),
	New DdVertex(   6.19167,    34.497,   -17.965 ) ]

Global s_bunnyTriList:Int[] = [
	 80,   2,  52,
	  0, 143,  92,
	 51,   1,  71,
	 96, 128,  77,
	 67,   2,  41,
	 85,  39,  52,
	 58, 123,  38,
	 99,  21, 114,
	 55,   9,  54,
	136, 102,  21,
	  3, 133,  81,
	101, 136,   4,
	  5,  82,   3,
	  6,  90,  24,
	  7,  40, 145,
	 33,  75, 134,
	 55,   8,   9,
	 10,  40,  20,
	 46, 140,  38,
	 74,  64,  11,
	 89,  88,  12,
	147,  60,   7,
	 47, 116,  13,
	 59, 129, 108,
	147,  72, 106,
	 33, 108,  75,
	100,  57,  14,
	129, 130,  15,
	 32,  35, 112,
	 16,  29,  27,
	107,  98, 132,
	130, 116,  47,
	 17,  43,   7,
	 54,  44,  53,
	 46,  34,  23,
	 87,  41,  23,
	 40,  10,  18,
	  8, 131,   9,
	 11,  19,  56,
	 11, 137,  19,
	 19,  20,  30,
	 28, 121, 137,
	122, 140,  36,
	 15, 130,  97,
	 28,  84,  83,
	114,  21, 102,
	 87,  98,  22,
	 41, 145,  23,
	133,  68,  12,
	 90,  70,  24,
	 31,  25,  26,
	 98,  34,  35,
	 16,  27, 116,
	 28,  83, 122,
	 29, 103,  77,
	 40,  30,  20,
	 14,  49, 103,
	 31,  26, 142,
	 78,   9, 131,
	 80,  62,   2,
	  6,  67, 105,
	 32,  48,  63,
	 60,  30,   7,
	 33, 135,  91,
	116, 130,  16,
	 47,  13,  39,
	 70, 119,   5,
	 24,  26,   6,
	102,  25,  31,
	103,  49,  77,
	 16, 130,  93,
	125, 126, 124,
	111,  86, 110,
	  4,  52,   2,
	 87,  34,  98,
	  4,   6, 101,
	 29,  76,  27,
	112,  35,  34,
	  6,   4,  67,
	 72,   1, 106,
	 26,  24,  70,
	 36,  37, 121,
	 81, 113, 142,
	 44, 109,  37,
	122,  58,  38,
	 96,  48, 128,
	 71,  11,  56,
	 73, 122,  83,
	 52,  39,  80,
	 40,  18, 145,
	 82,   5, 119,
	 10,  20, 120,
	139, 145,  41,
	  3, 142,   5,
	 76, 117,  27,
	 95, 120,  20,
	104,  45,  42,
	128,  43,  17,
	 44,  37,  36,
	128,  45,  64,
	143, 111, 126,
	 34,  46,  38,
	 97, 130,  47,
	142,  91, 115,
	114,  31, 115,
	125, 100, 129,
	 48,  96,  63,
	 62,  41,   2,
	 69,  77,  49,
	133,  50,  68,
	 60,  51,  30,
	  4, 118,  52,
	 53,  55,  54,
	 95,   8,  55,
	121,  37,  19,
	 65,  75,  99,
	 51,  56,  30,
	 14,  57, 110,
	 58, 122,  73,
	 59,  92, 125,
	 42,  45, 128,
	 49,  14, 110,
	 60, 147,  61,
	 76,  62, 117,
	 69,  49,  86,
	 26,   5, 142,
	 46,  44,  36,
	 63,  50, 132,
	128,  64,  43,
	 75, 108,  15,
	134,  75,  65,
	 68,  69,  86,
	 62,  76, 145,
	142, 141,  91,
	 67,  66, 105,
	 69,  68,  96,
	119,  70,  90,
	 33,  91, 108,
	136, 118,   4,
	 56,  51,  71,
	  1,  72,  71,
	 23,  18,  44,
	104, 123,  73,
	106,   1,  61,
	 86, 111,  68,
	 83,  45, 104,
	 30,  56,  19,
	 15,  97,  99,
	 71,  74,  11,
	 15,  99,  75,
	 25, 102,   6,
	 12,  94,  81,
	135,  33, 134,
	138, 133,   3,
	 76,  29,  77,
	 94,  88, 141,
	115,  31, 142,
	 36, 121, 122,
	  4,   2,  67,
	  9,  78,  79,
	137, 121,  19,
	 69,  96,  77,
	 13,  62,  80,
	  8, 127, 131,
	143, 141,  89,
	133,  12,  81,
	 82, 119, 138,
	 45,  83,  84,
	 21,  85, 136,
	126, 110, 124,
	 86,  49, 110,
	 13, 116, 117,
	 22,  66,  87,
	141,  88,  89,
	 64,  45,  84,
	 79,  78, 109,
	 26,  70,   5,
	 14,  93, 100,
	 68,  50,  63,
	 90, 105, 138,
	141,   0,  91,
	105,  90,   6,
	  0,  92,  59,
	 17, 145,  76,
	 29,  93, 103,
	113,  81,  94,
	 39,  85,  47,
	132,  35,  32,
	128,  48,  42,
	 93,  29,  16,
	145,  18,  23,
	108, 129,  15,
	 32, 112,  48,
	 66,  41,  87,
	120,  95,  55,
	 96,  68,  63,
	 85,  99,  97,
	 18,  53,  44,
	 22,  98, 107,
	 98,  35, 132,
	 95, 127,   8,
	137,  64,  84,
	 18,  10,  53,
	 21,  99,  85,
	 54,  79,  44,
	100,  93, 130,
	142,   3,  81,
	102, 101,   6,
	 93,  14, 103,
	 42,  48, 104,
	 87,  23,  34,
	 66,  22, 105,
	106,  61, 147,
	 72,  74,  71,
	109, 144,  37,
	115,  65,  99,
	107, 132, 133,
	 94,  12,  88,
	108,  91,  59,
	 43,  64,  74,
	109,  78, 144,
	 43, 147,   7,
	 91, 135, 115,
	111, 110, 126,
	 38, 112,  34,
	142, 113,  94,
	 54,   9,  79,
	120,  53,  10,
	138,   3,  82,
	114, 102,  31,
	134,  65, 115,
	105,  22, 107,
	125, 129,  59,
	 37, 144,  19,
	 17,  76,  77,
	 89,  12, 111,
	 41,  66,  67,
	 13, 117,  62,
	116,  27, 117,
	136,  52, 118,
	 51,  60,  61,
	138, 119,  90,
	 53, 120,  55,
	 68, 111,  12,
	122, 121,  28,
	123,  58,  73,
	110,  57, 124,
	 47,  85,  97,
	 44,  79, 109,
	126, 125,  92,
	 43,  74, 146,
	 20,  19, 127,
	128,  17,  77,
	 72, 146,  74,
	115,  99, 114,
	140, 122,  38,
	133, 105, 107,
	129, 100, 130,
	131, 144,  78,
	 95,  20, 127,
	123,  48, 112,
	102, 136, 101,
	 89, 111, 143,
	 28, 137,  84,
	133, 132,  50,
	125,  57, 100,
	 38, 123, 112,
	124,  57, 125,
	135, 134, 115,
	 23,  44,  46,
	136,  85,  52,
	 41,  62, 139,
	137,  11,  64,
	104,  48, 123,
	133, 138, 105,
	145, 139,  62,
	 25,   6,  26,
	  7,  30,  40,
	 46,  36, 140,
	141, 143,   0,
	132,  32,  63,
	 83, 104,  73,
	 19, 144, 127,
	142,  94, 141,
	 39,  13,  80,
	 92, 143, 126,
	127, 144, 131,
	 51,  61,   1,
	 91,   0,  59,
	 17,   7, 145,
	 43, 146, 147,
	146,  72, 147 ]

Function ImageCheckerboard:Void( _dst:DataBuffer, _width:Int, _height:Int, _step:Int, _0:Int, _1:Int )

	Local address:Int = 0 

	For Local yy:Int = 0 Until _height
		For Local xx:Int = 0 Until _width

			' uint32_t abgr = ( (xx/_step)&1) ^ ( (yy/_step)&1) ? _1 : _0;
			Local abgr:Int = _0 ; If ( (xx / _step) & 1 ) ~ ( (yy / _step) & 1 ) Then abgr = _1
			_dst.PokeInt( address, abgr ) ; address += 4
		Next
	Next

End

Class DebugDrawExample Extends App

	Field bgfxCaps          := New BgfxCaps()

	Field m_width           :Int ' use DeviceWidth directly
	Field m_height          :Int ' use DeviceHeight directly
'  	Field m_debug           :Int = BGFX_DEBUG_NONE
	Field m_debug           :Int ' = BGFX_DEBUG_TEXT
	Field m_reset           :Int ' = BGFX_RESET_VSYNC

	Field m_timeOffset :Int

	Field m_sprite     :Int ' SpriteHandle
	Field m_bunny      :Int ' GeometryHandle

	Method OnCreate:Int()

		SetUpdateRate( 60 )

		m_width  = DeviceWidth()
		m_height = DeviceHeight()
		m_debug  = BGFX_DEBUG_TEXT
		m_reset  = BGFX_RESET_VSYNC ' <-- not used because init is in target

'  		bgfx::Init init;
'  		init.type     = args.m_type;
'  		init.vendorId = args.m_pciId;
'  		init.resolution.width  = m_width;
'  		init.resolution.height = m_height;
'  		init.resolution.reset  = m_reset;
'  		bgfx::init(init);

		' Enable m_debug text.
		bgfxSetDebug( m_debug )

		' Set view 0 clear state.
		bgfxSetViewClear( 0, BGFX_CLEAR_COLOR | BGFX_CLEAR_DEPTH, $303030ff, 1.0, 0 )

		m_timeOffset = Millisecs()

		CameraCreate()

		Local initialPos:Float[] = [ 0.0, 2.0, -12.0 ]
		CameraSetPosition( initialPos )
		CameraSetVerticalAngle( 0.0 )

		ddInit()

		Local data := New DataBuffer( 32 * 32 * 4 )
		ImageCheckerboard( data, 32, 32, 4, $ff808080, $ffc0c0c0 )

		m_sprite = ddCreateSprite( 32, 32, data )
		m_bunny  = ddCreateGeometry( s_bunnyVertices.Length(), s_bunnyVertices, s_bunnyTriList.Length(), s_bunnyTriList )
		' m_bunny  = ddCreateGeometry( s_bunnyVertices, s_bunnyTriList )

		Return 0
	End

	Method OnUpdate:Int()
		Return 0
	End

	'
	' @Bug: Crash when trying to destroy bgfx
	'
'  	Method OnClose:Int()
'  
'  		ddDestroy( m_bunny )
'  		ddDestroy( m_sprite )
'  
'  		ddShutdown()
'  
'  		CameraDestroy()
'  
'  		' Shutdown bgfx.
'  		bgfxShutdown()
'  
'  		Return 0
'  	End

'  	Method Intersect:Bool( _dde:DebugDrawEncoder, _ray:BoundsRay, _shape:BoundsShape )
'  
'  		Local hit := BoundsHitPool.Allocate()
'  
'  		' if (::intersect(_ray, _shape, &hit) )
'  		If BoundsIntersect( _ray, _shape, hit ) Then
'  
'  			_dde.Push()
'  
'  			_dde.SetWireframe( False )
'  
'  			_dde.SetColor( $ff0000ff )
'  
'  			Local tmpVec:Float[ 3 ]
'  			bxVec3Mul( tmpVec, hit.m_normal, 0.7 )
'  
'  			Local endVec:Float[ 3 ]
'  			bxVec3Add( endVec, hit.m_pos, tmpVec )
'  
'  			_dde.DrawCone( hit.m_pos, endVec, 0.1 )
'  
'  			_dde.Pop()
'  
'  			hit.Free()
'  			Return True
'  		Endif
'  
'  		hit.Free()
'  		Return False
'  	End

	Method DrawIntersect:Void( hit:BoundsHit )

		dde.Push()

			dde.SetWireframe( False )

			dde.SetColor( $ff0000ff )

			Local tmpVec:Float[ 3 ]
			bxVec3Mul( tmpVec, hit.m_normal, 0.7 )

			Local endVec:Float[ 3 ]
			bxVec3Add( endVec, hit.m_pos, tmpVec )

			dde.DrawCone( hit.m_pos, endVec, 0.1 )

		dde.Pop()
	End

	Field last:Int

	Field dde := New DebugDrawEncoder()

	Method OnRender:Int()

		Local m_width  :Int = DeviceWidth()
		Local m_height :Int = DeviceHeight()

		' Update frame timer
		Local now       :Int = Millisecs() - m_timeOffset
		Local frameTime :Int = now - last
		last = now

		Local deltaTime :Float = Float( frameTime ) * 0.001

		bgfxGetCaps( bgfxCaps )

		' Update camera.
		CameraUpdate( deltaTime )

		Local view:Float[ 16 ]
		CameraGetViewMtx( view )

		Local proj:Float[ 16 ]

		' Set view and projection matrix for view 0.
		' {
			bxMtxProj( proj, 60.0, Float( m_width ) / Float( m_height ), 0.1, 100.0, bgfxCaps.GetHomogeneousDepth() )

			bgfxSetViewTransform( 0, view, proj )
			bgfxSetViewRect( 0, 0, 0, m_width, m_height )
		' }

		Local mtxVp:Float[ 16 ]
		bxMtxMul( mtxVp, view, proj )

		Local mtxInvVp:Float[ 16 ]
		bxMtxInverse( mtxInvVp, mtxVp )

		Local zero:Float[ 3 ]
		Local eye:Float[] = [ 5.0, 10.0, 5.0 ]

		bxMtxLookAt( view, eye, zero )
		bxMtxProj( proj, 45.0, Float( m_width ) / Float( m_height ), 1.0, 15.0, bgfxCaps.GetHomogeneousDepth() )
		bxMtxMul( mtxVp, view, proj )

		Local ray := BoundsRayPool.Allocate()
		Local hit := BoundsHitPool.Allocate()

		BoundsMakeRay(
			 ( Float( MouseX() ) / Float( m_width  ) * 2.0 - 1.0 ),
			-( Float( MouseY() ) / Float( m_height ) * 2.0 - 1.0 ),
			mtxInvVp, 
			ray )

		Const selected:Int = $ff80ffff

		dde.Begin( 0 )
		dde.DrawAxis( 0.0, 0.0, 0.0 )

		Local aabb := BoundsAabbPool.Allocate()

		dde.Push()
			aabb.Init( 5.0, 1.0, 1.0, 10.0, 5.0, 5.0 )
			dde.SetWireframe( True )
			If BoundsIntersect( ray, aabb, hit ) Then
				DrawIntersect( hit )
				dde.SetColor( selected )
			Else
				dde.SetColor( $ff00ff00 )
			Endif
			dde.Draw( aabb )
		dde.Pop();

		Local time:Float = Float( now ) * 0.001

		Local obb := BoundsObbPool.Allocate()

		bxMtxRotateX( obb.m_mtx, time )
		dde.SetWireframe( True )
		If BoundsIntersect( ray, obb, hit ) Then
			DrawIntersect( hit )
			dde.SetColor( selected )
		Else
			dde.SetColor( $ffffffff )
		Endif
		dde.Draw( obb )

		bxMtxSRT( obb.m_mtx, 1.0, 1.0, 1.0, time * 0.23, time, 0.0, 3.0, 0.0, 0.0 )

		dde.Push()
			BoundsToAabb( aabb, obb )
			dde.SetWireframe( True )
			dde.SetColor( $ff0000ff )
			dde.Draw( aabb )
		dde.Pop()

		dde.SetWireframe( False )
		If BoundsIntersect( ray, obb, hit ) Then
			DrawIntersect( hit )
			dde.SetColor( selected )
		Else
			dde.SetColor( $ffffffff )
		Endif
		dde.Draw( obb )

		dde.SetColor( $ffffffff )

		dde.Push()
		' {
			Local bunny:Float[ 16 ]
			bxMtxSRT( bunny, 0.03, 0.03, 0.03, 0.0, 0.0, 0.0, -3.0, 0.0, 0.0 )

			dde.SetTransform( bunny )
			Local wireframe:Bool = ( time Mod 2.0 ) > 1.0
			dde.SetWireframe( wireframe )
			If wireframe Then dde.SetColor( $ffff00ff ) Else dde.SetColor( $ff00ff00 )
			dde.Draw( m_bunny )
		' }
		dde.Pop()

		dde.SetTranslate( 0.0, -2.0, 0.0 )
		dde.DrawGrid( AXIS_Y, zero, 20, 1.0 )
		dde.SetTransform()

		dde.DrawFrustum( mtxVp )

		Local sphere := BoundsSpherePool.Allocate()

		dde.Push()
			sphere.Init( 0.0, 5.0, 0.0, 1.0 )
			If BoundsIntersect( ray, sphere, hit ) Then
				DrawIntersect( hit )
				dde.SetColor( selected )
			Else
				dde.SetColor( $fff0c0ff )
			Endif
			dde.SetWireframe( True )
			dde.SetLod( 3 )
			dde.Draw( sphere )
			dde.SetWireframe( False )

			sphere.m_center[ 0 ] = -2.0
			If BoundsIntersect( ray, sphere, hit ) Then
				DrawIntersect( hit )
				dde.SetColor( selected )
			Else
				dde.SetColor( $c0ffc0ff )
			Endif
			dde.SetLod( 2 )
			dde.Draw( sphere )

			sphere.m_center[ 0 ] = -4.0
			If BoundsIntersect( ray, sphere, hit ) Then
				DrawIntersect( hit )
				dde.SetColor( selected )
			Else
				dde.SetColor( $a0f0ffff )
			Endif
			dde.SetLod( 1 )
			dde.Draw( sphere )

			sphere.m_center[ 0 ] = -6.0
			If BoundsIntersect( ray, sphere, hit ) Then
				DrawIntersect( hit )
				dde.SetColor( selected )
			Else
				dde.SetColor( $ffc0ff00 )
			Endif
			dde.SetLod( 0 )
			dde.Draw( sphere )
		dde.Pop()

		dde.SetColor( $ffffffff )

		dde.Push()
		' {
			Local normal:Float[] = [  0.0, 0.0, 1.0 ]
			Local center:Float[] = [ -8.0, 0.0, 0.0 ]
			dde.Push()
				dde.SetStipple( True, 1.0, time * 0.1 )
				dde.SetColor( $ff0000ff )
				dde.DrawCircle( normal, center, 1.0, 0.5 + Sinr( time * 10.0 ) )
			dde.Pop()

			dde.SetSpin( time )
			dde.DrawSprite( m_sprite, normal, center, 2.0 )
		' }
		dde.Pop()

		dde.Push()
			dde.SetStipple( True, 1.0, -time * 0.1 )
			dde.DrawCircle( AXIS_Z, -8.0, 0.0, 0.0, 1.25, 2.0 )
		dde.Pop()

		Local cone     := BoundsConePool.Allocate()
		Local cylinder := BoundsCylinderPool.Allocate()
		Local capsule  := BoundsCapsulePool.Allocate()

		dde.Push();
			dde.SetLod( UINT8_MAX )

			dde.Push()
				dde.SetSpin( time * 0.3 )
				' {
				cone.Init( -11.0, 4.0, 0.0, -13.0, 6.0, 1.0, 1.0 )
				cylinder.Init( -9.0, 2.0, -1.0, -11.0, 4.0, 0.0, 0.5 )

				If False Or BoundsIntersect( ray, cone, hit ) Or BoundsIntersect( ray, cylinder, hit ) Then
					DrawIntersect( hit )
					dde.SetColor( selected )
				Else
					dde.SetColor( $ffffffff )
				Endif

				dde.Draw( cone )
				dde.Draw( cylinder )
				' }
			dde.Pop()

			' {
			dde.SetLod( 0 )
			capsule.Init( 0.0, 7.0, 0.0, -6.0, 7.0, 0.0, 0.5 )
			If BoundsIntersect( ray, capsule, hit ) Then
				DrawIntersect( hit )
				dde.SetColor( selected )
			Else
				dde.SetColor( $ffffffff )
			Endif
			dde.Draw( capsule )
			' }
		dde.Pop()

		dde.Push()

			Local mtx:Float[ 16 ]
			bxMtxSRT( mtx, 1.0, 1.0, 1.0, 0.0, time, time * 0.53, -10.0, 1.0, 10.0 )

			' Local cylinder := New Cylinder(

			' @test: not sure if we can reuse variable here
			cylinder.Init( -10.0, 1.0, 10.0, 0.0, 0.0, 0.0, 1.0 )

			Local up:Float[] = [ 0.0, 4.0, 0.0 ]
			bxVec3MulMtx( cylinder.m_end, up, mtx )
			If BoundsIntersect( ray, cylinder, hit ) Then
				DrawIntersect( hit )
				dde.SetColor( selected )
			Else
				dde.SetColor( $ffffffff )
			Endif
			dde.Draw( cylinder )

			dde.Push()
				BoundsToAabb( aabb, cylinder )
				dde.SetWireframe( True )
				dde.SetColor( $ff0000ff )
				dde.Draw( aabb )
			dde.Pop()

		dde.Pop()

		dde.DrawOrb( -11.0, 0.0, 0.0, 1.0 )

		dde.Finish()

		capsule.Free()
		cylinder.Free()
		cone.Free()
		sphere.Free()
		obb.Free()
		aabb.Free()
		hit.Free()
		ray.Free()

		' Advance to next frame. Rendering thread will be kicked to
		' process submitted rendering primitives.
		'
		' bgfxFrame is done in the while loop of method void BBGlfwGame::Run() 
		' in file targets\glfw3_bgfx\modules\native\glfwgame.cpp
		' it is done after method RenderGame(), where glfwSwapBuffers used to be
		'
		' bgfxFrame()

		Return 0
	End

End

Function Main:Int()
	Print "Title: 29-debugdraw"
	Print "Description: Debug draw."
	New DebugDrawExample()
	Return 0
End


