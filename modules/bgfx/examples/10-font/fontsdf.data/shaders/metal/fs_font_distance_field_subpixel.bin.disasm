using namespace metal;
struct xlatMtlShaderInput {
  float4 v_color0;
  float4 v_texcoord0;
};
struct xlatMtlShaderOutput {
  float4 gl_FragColor;
};
struct xlatMtlShaderUniform {
};
fragment xlatMtlShaderOutput xlatMtlMain (xlatMtlShaderInput _mtl_i [[stage_in]], constant xlatMtlShaderUniform& _mtl_u [[buffer(0)]]
  ,   texturecube<float> s_texColor [[texture(0)]], sampler _mtlsmp_s_texColor [[sampler(0)]])
{
  xlatMtlShaderOutput _mtl_o;
  int tmpvar_1 = 0;
  tmpvar_1 = int(((_mtl_i.v_texcoord0.w * 4.0) + 0.5));
  float3 tmpvar_2 = 0;
  tmpvar_2 = dfdx(_mtl_i.v_texcoord0.xyz);
  float3 tmpvar_3 = 0;
  tmpvar_3 = dfdy(-_mtl_i.v_texcoord0.xyz);
  float3 tmpvar_4 = 0;
  tmpvar_4 = (0.166667 * tmpvar_2);
  float tmpvar_5 = 0;
  tmpvar_5 = s_texColor.sample(_mtlsmp_s_texColor, (float3)((_mtl_i.v_texcoord0.xyz - tmpvar_4))).zyxw[tmpvar_1];
  float tmpvar_6 = 0;
  tmpvar_6 = s_texColor.sample(_mtlsmp_s_texColor, (float3)((_mtl_i.v_texcoord0.xyz + tmpvar_4))).zyxw[tmpvar_1];
  float tmpvar_7 = 0;
  tmpvar_7 = (0.5 * (tmpvar_5 + tmpvar_6));
  float tmpvar_8 = 0;
  tmpvar_8 = (8.0 * (sqrt(
    dot (tmpvar_2, tmpvar_2)
  ) + sqrt(
    dot (tmpvar_3, tmpvar_3)
  )));
  float3 tmpvar_9 = 0;
  tmpvar_9.x = tmpvar_5;
  tmpvar_9.y = tmpvar_7;
  tmpvar_9.z = tmpvar_6;
  float edge0_10 = 0;
  edge0_10 = (0.5 - tmpvar_8);
  float3 tmpvar_11 = 0;
  tmpvar_11 = clamp (((tmpvar_9 - edge0_10) / (
    (0.5 + tmpvar_8)
   - edge0_10)), 0.0, 1.0);
  _mtl_o.gl_FragColor.xyz = ((tmpvar_11 * (tmpvar_11 * 
    (3.0 - (2.0 * tmpvar_11))
  )) * _mtl_i.v_color0.w);
  _mtl_o.gl_FragColor.w = (tmpvar_7 * _mtl_i.v_color0.w);
  return _mtl_o;
}

